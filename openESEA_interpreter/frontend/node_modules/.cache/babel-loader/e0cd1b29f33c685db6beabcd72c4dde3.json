{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\views\\organisation\\OrganisationDashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\views\\organisation\\OrganisationDashboard.vue","mtime":1708979735272},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\babel.config.js","mtime":1707572265264},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1741014593746},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["isEqual","cloneDeep","mapState","mapGetters","mapMutations","mapActions","EseaAccountService","SurveyResponseService","DirectIndicatorService","IndirectIndicatorService","Dashboard","DashboardEditingSection","ProgressSpinner","Dialog","components","data","organisationId","$route","params","OrganisationId","dashboardId","DashboardId","dashboardLoaded","initialDashboard","showDialog","fetchSuggestionsTimer","testing","computed","permission","organisation","accesLevel","watch","dashboard","handler","deep","mounted","setInterval","fetchDashboardSuggestions","unmounted","clearInterval","beforeUnmount","window","removeEventListener","unload","created","addEventListener","fetchDashboard","id","parseInt","loadDashboardFromDatabase","setInitialDashboard","initializeRLModel","beforeRouteLeave","to","from","next","console","log","dashboardSaved","stopRLModel","methods","event","preventDefault","returnValue","sleep","delay","Promise","resolve","setTimeout","getIndicatorDataSets","collectDashboardInfo","buildDashboardRLModel","_this$selectionConfig","visualisationInfoList","overviewId","selectionConfig","selectionConfigCurrent","containers","getContainers","dashboardWidth","$refs","clientWidth","dashboardHeight","clientHeight","dashboardDisplayArea","visualisationDatasets","getVisualisationDatasets","containerId","length","containerPosition","Position","containerWidth","containerHeight","visualisations","getVisualisations","visualisationId","_visualisationData","_visualisationData2","_visualisationData2$d","_visualisationData$da","_visualisationData3","_visualisationData3$d","_visualisationData4","visualisationPosition","xStartPixels","xEndPixels","yStartPixels","yEndPixels","visualisationDisplayArea","visualisationData","visualisationDataset","config","dataset","visualisationType","getVisualisationType","visualisationTitle","getVisualisationTitle","categoryLimit","getCategoryLimit","categoryField","Object","keys","mapping","find","fieldKey","allCategories","map","row","distinctCategories","Set","numberOfCategories","size","numberOfDataPoints","amountOfValueFields","filter","includes","visualisationInfo","push","Visualisations","updateRLModel","updateDashboardRLModel","deleteDashboardRLModel","saveChanges","saveDashboardToDatabase","closeDialog","discardChanges","oldDashboard","loadDashboardModel","getDashboard","setDashboard","model","specification","loadDashboardData","dashboardModel","getDashboardModel","updateDashboard","createDashboardModel","payload","value","indicators","retrieveIndicators","setIndicators","indicatorData","retrieveIndicatorData","setIndicatorData","createIndicatorDataSets","_indicators","methodIds","getMethods","methodId","_directIndicators$err","_directIndicators$err2","_indirectIndicators$e","_indirectIndicators$e2","directIndicators","get","mId","error","response","status","directIndicator","_directIndicators$res","indirectIndicators","indirectIndicator","_indirectIndicators$r","el","name","key","eseaData","eseaAccountsRequest","oId","eseaAccounts","eseaAccount","eseaAccountId","eseaAccountYear","year","eseaMethod","method","surveyResponseRequest","eaId","surveyResponses","surveyResponse","questionResponses","question_responses","questionResponse","_questionResponse$val","directIndicatorKey","direct_indicator_key","directIndicatorValue","values","multipleChoice","Value","Year"],"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\views\\organisation\\OrganisationDashboard.vue"],"sourcesContent":["<template>\r\n\r\n    <!-- Dashboard -->\r\n    <div class=\"organisation-dashboard\" ref=\"dashboard\">\r\n\r\n        <!-- Show spinner while loading dashboard -->\r\n        <div v-if=\"!dashboardLoaded\" class=\"spinner-div\">\r\n            <ProgressSpinner class=\"center-spinner\"></ProgressSpinner>\r\n        </div>\r\n\r\n        <!-- If dashboard is loaded, show dashboard and editing section -->\r\n        <div v-else>\r\n            <!-- Editing Section -->\r\n            <DashboardEditingSection @saveButtonClicked=\"saveDashboardToDatabase\" @discardButtonClicked=\"discardChanges\"></DashboardEditingSection>\r\n            <!-- Actual dashboard -->\r\n            <Dashboard></Dashboard>\r\n\r\n            <!-- Dialog showing that there are unsaved changes -->\r\n            <Dialog ref=\"dialog\" v-model:visible=\"showDialog\" modal\r\n                :header=\"'There are unsaved changes to the dashboard. Do you want to save these changes?'\">\r\n\r\n                <!-- Footer with buttons for options: Cancel, Discard Changes, Save Changes -->\r\n                <template #footer>\r\n                    <Button label=\"Cancel\" icon=\"pi pi-times\"\r\n                        @click=\"closeDialog\" text>\r\n                    </Button>\r\n                    <Button label=\"Discard Changes\" icon=\"pi pi-trash\" class=\"p-button-danger p-button-sm\"\r\n                        @click=\"discardChanges\" text>\r\n                    </Button>\r\n                    <Button label=\"Save Changes\" icon=\"pi pi-check\" class=\"p-button-success p-button-sm\"\r\n                        @click=\"saveChanges\" autofocus>\r\n                    </Button>\r\n                </template>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { isEqual, cloneDeep } from 'lodash'\r\n\r\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\r\n\r\nimport EseaAccountService from '../../services/EseaAccountService.js'\r\nimport SurveyResponseService from '../../services/SurveyResponseService.js'\r\nimport DirectIndicatorService from '../../services/DirectIndicatorService.js'\r\nimport IndirectIndicatorService from '../../services/IndirectIndicatorService.js'\r\n\r\nimport Dashboard from '../../components/dashboard/Dashboard.vue'\r\nimport DashboardEditingSection from '../../components/dashboard/DashboardEditingSection.vue'\r\n\r\nimport ProgressSpinner from 'primevue/progressspinner'\r\nimport Dialog from 'primevue/dialog'\r\n\r\nexport default {\r\n    components: {\r\n        DashboardEditingSection,\r\n        Dashboard,\r\n\r\n        ProgressSpinner,\r\n        Dialog\r\n    },\r\n    data () {\r\n        return {\r\n            // Route parameters for organisation and dashboard ids\r\n            organisationId: this.$route.params.OrganisationId,\r\n            dashboardId: this.$route.params.DashboardId,\r\n\r\n            dashboardLoaded: false,\r\n\r\n            initialDashboard: null,\r\n\r\n            showDialog: false,\r\n\r\n            fetchSuggestionsTimer: null,\r\n\r\n            testing: true\r\n        }\r\n    },\r\n    computed: {\r\n        // ...mapState('network', ['networks']),\r\n        ...mapState('organisation', ['organisation']),\r\n        ...mapState('dashboardModel', ['dashboard', 'selectionConfig']),\r\n            permission () {\r\n                if (this.organisation.accesLevel) {\r\n                    const accesLevel = this.organisation.accesLevel\r\n                    if (accesLevel === 'admin' || accesLevel === 'network admin') {\r\n                        return true\r\n                    }\r\n                }\r\n                return false\r\n            }\r\n    },\r\n    watch: {\r\n        dashboard: {\r\n            handler: 'updateRLModel',\r\n            deep: true\r\n        }\r\n    },\r\n    async mounted () {\r\n        if (!this.testing) {\r\n            this.fetchSuggestionsTimer = setInterval(this.fetchDashboardSuggestions, 10000)\r\n        }\r\n    },\r\n    async unmounted () {\r\n        if (!this.testing) {\r\n            clearInterval(this.fetchSuggestionsTimer)\r\n        }\r\n    },\r\n    async beforeUnmount () {\r\n        window.removeEventListener('beforeunload', this.unload)\r\n    },\r\n    async created () {\r\n        window.addEventListener('beforeunload', this.unload)\r\n\r\n        // Fetch latest version of dashboard\r\n        await this.fetchDashboard({ id: parseInt(this.dashboardId) })\r\n        // Load dashboard from fetched dashboard\r\n        await this.loadDashboardFromDatabase()\r\n        await this.setInitialDashboard()\r\n\r\n        // Initialize RL model\r\n        if (!this.testing) {\r\n            await this.initializeRLModel()\r\n        }\r\n    },\r\n    async beforeRouteLeave (to, from, next) {\r\n        console.log('Leaving route')\r\n        if (!this.dashboardLoaded) next(true)\r\n        if (!this.dashboardSaved()) {\r\n            this.showDialog = true\r\n            next(false)\r\n        } else {\r\n            if (!this.testing) {\r\n                await this.stopRLModel()\r\n            }\r\n            next(true)\r\n        }\r\n    },\r\n    methods: {\r\n        ...mapGetters('dashboard', ['getDashboard', 'getDashboards']),\r\n        ...mapActions('dashboard', ['setDashboard', 'updateDashboard', 'fetchDashboard']),\r\n\r\n        ...mapGetters('dashboardData', ['getIndicatorDataSets', 'getIndicatorFields', 'getIndicators', 'getVisualisationDatasets']),\r\n        ...mapMutations('dashboardData', ['setIndicators', 'setIndicatorData', 'setIndicatorFields']),\r\n        ...mapActions('dashboardData', ['createIndicatorDataSets']),\r\n\r\n        ...mapGetters('dashboardModel', ['getDashboardModel', 'getMethods', 'getOverview', 'getContainers', 'getVisualisations', 'getVisualisationTitle', 'getVisualisationType', 'getCategoryLimit']),\r\n        ...mapActions('dashboardModel', ['createDashboardModel']),\r\n\r\n        ...mapActions('dashboardSuggestions', ['buildDashboardRLModel', 'updateDashboardRLModel', 'deleteDashboardRLModel', 'fetchDashboardSuggestions']),\r\n\r\n        setInitialDashboard () {\r\n            this.initialDashboard = cloneDeep(this.dashboard)\r\n        },\r\n        dashboardSaved () {\r\n            return isEqual(this.dashboard, this.initialDashboard)\r\n        },\r\n\r\n        async unload (event) {\r\n            console.log('Unloading page')\r\n            if (!this.dashboardLoaded) return\r\n            // Prevent page unloading if dashboard is not saved\r\n            if (!this.dashboardSaved()) {\r\n                event.preventDefault()\r\n                event.returnValue = '' // Required for older browsers\r\n            }\r\n        },\r\n        async initializeRLModel () {\r\n            // Wait 2 seconds before visualisations are loaded\r\n            const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\r\n            console.log('datasets:')\r\n            console.log(await this.getIndicatorDataSets()())\r\n            await sleep(2000)\r\n            // Build new RL Model and set interval for fetching suggestions\r\n            const dashboard = await this.collectDashboardInfo()\r\n            console.log(dashboard)\r\n            if (!this.testing) {\r\n                await this.buildDashboardRLModel({ data: { dashboard: dashboard } })\r\n            }\r\n        },\r\n        async collectDashboardInfo () {\r\n            // Initialize list with info for all visualisations\r\n            var visualisationInfoList = []\r\n\r\n            // Select current overview\r\n            const overviewId = this.selectionConfig?.overviewId\r\n            var selectionConfigCurrent = { overviewId: overviewId }\r\n\r\n            // Get all containers with possible visualisations, if no containers, return\r\n            const containers = await this.getContainers()(selectionConfigCurrent)\r\n            if (!containers) return visualisationInfoList\r\n\r\n            // Dashboard size\r\n            const dashboardWidth = this.$refs.dashboard.clientWidth\r\n            const dashboardHeight = this.$refs.dashboard.clientHeight\r\n            const dashboardDisplayArea = dashboardWidth * dashboardHeight\r\n\r\n            // Get visualisation datasets\r\n            var visualisationDatasets = await this.getVisualisationDatasets()()\r\n            // Collect visualisations for each container\r\n            for (let containerId = 0; containerId < containers.length; containerId++) {\r\n                const containerPosition = containers[containerId].Position\r\n                const containerWidth = (containerPosition['X End'] - containerPosition['X Start']) * dashboardWidth / 100\r\n                const containerHeight = (containerPosition['Y End'] - containerPosition['Y Start']) * dashboardHeight / 100\r\n\r\n                // Update selection to current conainer\r\n                selectionConfigCurrent.containerId = containerId\r\n                // Get all visualisation for this container\r\n                const visualisations = await this.getVisualisations()(selectionConfigCurrent)\r\n                // Get info for each visualisation\r\n                for (let visualisationId = 0; visualisationId < visualisations.length; visualisationId++) {\r\n                    const visualisationPosition = visualisations[visualisationId].Position\r\n                    const xStartPixels = dashboardWidth * containerPosition['X Start'] + containerWidth * visualisationPosition['X Start']\r\n                    const xEndPixels = dashboardWidth * containerPosition['X End'] + containerWidth * visualisationPosition['X End']\r\n                    const yStartPixels = dashboardHeight * containerPosition['Y Start'] + containerHeight * visualisationPosition['Y Start']\r\n                    const yEndPixels = dashboardHeight * containerPosition['Y End'] + containerHeight * visualisationPosition['Y End']\r\n                    const visualisationDisplayArea = (xEndPixels - xStartPixels) * (yEndPixels - yStartPixels)\r\n\r\n                    // Update selection to current visualisation\r\n                    selectionConfigCurrent.visualisationId = visualisationId\r\n\r\n                    // Get dataset for this visualisation\r\n                    var visualisationData = null\r\n\r\n                    for (const visualisationDataset of visualisationDatasets) {\r\n                        const config = visualisationDataset.config\r\n                        const dataset = visualisationDataset.dataset\r\n                        if (isEqual(config, selectionConfigCurrent)) {\r\n                            visualisationData = dataset\r\n                            break\r\n                        }\r\n                    }\r\n\r\n                    // Get visualisation type\r\n                    const visualisationType = await this.getVisualisationType()(selectionConfigCurrent)\r\n                    const visualisationTitle = await this.getVisualisationTitle()(selectionConfigCurrent)\r\n                    const categoryLimit = await this.getCategoryLimit()(selectionConfigCurrent)\r\n\r\n                    const categoryField = Object.keys(visualisationData?.mapping).find(fieldKey => fieldKey === 'Category Field')\r\n                    const allCategories = categoryField ? visualisationData?.data?.map(row => row[categoryField]) : []\r\n                    const distinctCategories = new Set(allCategories)\r\n\r\n                    const numberOfCategories = distinctCategories?.size\r\n                    const numberOfDataPoints = visualisationData?.data?.length ?? 0\r\n                    const amountOfValueFields = Object.keys(visualisationData?.mapping).filter(fieldKey => fieldKey.includes('Value Field')).length\r\n\r\n                    // Gather all visualisation information into one object\r\n                    var visualisationInfo = {}\r\n                    visualisationInfo['Selection Configuration'] = cloneDeep(selectionConfigCurrent) // For applying this to the correct visualisation\r\n                    visualisationInfo['Visualisation Type'] = visualisationType\r\n                    visualisationInfo['Visualisation Title'] = visualisationTitle\r\n                    visualisationInfo['Category Items'] = numberOfCategories\r\n                    visualisationInfo['Data Items'] = numberOfDataPoints * amountOfValueFields\r\n                    visualisationInfo['Item Limit Enabled'] = categoryLimit > 0\r\n                    visualisationInfo['Item Limit'] = categoryLimit ?? 0\r\n                    visualisationInfo['Display Area'] = visualisationDisplayArea\r\n                    visualisationInfo.Position = { 'X Start': xStartPixels, 'X End': xEndPixels, 'Y Start': yStartPixels, 'Y End': yEndPixels }\r\n                    visualisationInfoList.push(visualisationInfo)\r\n                }\r\n            }\r\n            return { Visualisations: visualisationInfoList, 'Display Area': dashboardDisplayArea }\r\n        },\r\n        async updateRLModel () {\r\n            if (this.testing) return\r\n            // Wait 2 seconds before visualisations are loaded\r\n            const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\r\n            await sleep(2000)\r\n            // Update RL Model and set interval for fetching suggestions\r\n            const dashboard = await this.collectDashboardInfo()\r\n            await this.updateDashboardRLModel({ data: { dashboard: dashboard } })\r\n            // Reset timer for fetching suggestions\r\n            if (!this.testing) {\r\n                clearInterval(this.fetchSuggestionsTimer)\r\n                this.fetchSuggestionsTimer = setInterval(this.fetchDashboardSuggestions, 10000)\r\n            }\r\n        },\r\n        async stopRLModel () {\r\n            // Delete RL model and clear timer\r\n            await this.deleteDashboardRLModel({ data: {} })\r\n            clearInterval(this.fetchSuggestionsTimer)\r\n        },\r\n        async saveChanges () {\r\n            await this.saveDashboardToDatabase()\r\n            this.closeDialog()\r\n        },\r\n        async discardChanges () {\r\n            const oldDashboard = cloneDeep(this.initialDashboard)\r\n            await this.loadDashboardModel(oldDashboard)\r\n            this.closeDialog()\r\n        },\r\n        closeDialog () {\r\n            this.showDialog = false\r\n        },\r\n\r\n        async loadDashboardFromDatabase () {\r\n            // Load dashboard from database\r\n            const dashboard = await this.getDashboard()\r\n            // Set as current dashboard\r\n            await this.setDashboard(dashboard)\r\n\r\n            // Get dashboard model specification\r\n            const model = dashboard.specification\r\n            // Load dashboard model\r\n            await this.loadDashboardModel(model)\r\n            // Load dashboard data\r\n            await this.loadDashboardData()\r\n            // When everything is ready show dashboard\r\n            this.dashboardLoaded = true\r\n        },\r\n        async saveDashboardToDatabase () {\r\n            if (!this.permission) {\r\n                console.log('No permission to save dashboards!')\r\n                return\r\n            } else {\r\n                console.log('Permission to save dashboard!')\r\n            }\r\n            // Get current dashboard model\r\n            const dashboardModel = await this.getDashboardModel()()\r\n            // Combine dashboard id with dashboard model specification\r\n            const dashboardId = parseInt(this.dashboardId)\r\n            const data = { id: dashboardId, data: dashboardModel }\r\n            // Send this data to update the dashboard in the database\r\n            await this.updateDashboard(data)\r\n            // Signal that changes are saved\r\n            await this.setInitialDashboard()\r\n        },\r\n        async loadDashboardModel (model) {\r\n            // Force reload by first setting model to null\r\n            await this.createDashboardModel(null)\r\n            // Then set dashboard model\r\n            const payload = { value: model }\r\n            await this.createDashboardModel(payload)\r\n        },\r\n        async loadDashboardData () {\r\n            // Retrieve and save all indicators of the given methods\r\n            const indicators = await this.retrieveIndicators()\r\n            await this.setIndicators(indicators)\r\n\r\n            // Retrieve and save all data for the indicators of the given methods\r\n            const indicatorData = await this.retrieveIndicatorData()\r\n            await this.setIndicatorData(indicatorData)\r\n\r\n            // Create data sets for each indicator\r\n            await this.createIndicatorDataSets()\r\n        },\r\n        async retrieveIndicators () {\r\n            const methodIds = await this.getMethods()()\r\n            var indicators = []\r\n            for (var methodId of methodIds) {\r\n                const directIndicators = await DirectIndicatorService.get({ mId: methodId })\r\n                console.log(directIndicators)\r\n                if (!directIndicators?.error || directIndicators?.error?.response?.status === 404) {\r\n                    for (var directIndicator of (directIndicators?.response?.data || [])) {\r\n                        indicators.push(directIndicator)\r\n                    }\r\n                }\r\n                const indirectIndicators = await IndirectIndicatorService.get({ mId: methodId })\r\n                console.log(indirectIndicators)\r\n                if (!indirectIndicators?.error || indirectIndicators?.error?.response?.status === 404) {\r\n                    for (var indirectIndicator of (indirectIndicators?.response?.data || [])) {\r\n                        indicators.push(indirectIndicator)\r\n                    }\r\n                }\r\n            }\r\n            // console.log(indicators)\r\n            indicators = indicators?.map(el => ({ name: el.name, key: el.key }))\r\n            return indicators\r\n        },\r\n        async retrieveIndicatorData () {\r\n            // Determine current organisation and targeted methods for dashboard\r\n            const methodIds = await this.getMethods()()\r\n            const organisationId = this.organisationId\r\n\r\n            /* Get the data from the esea accounts of the current organisation (by looking at the question responses in the survey responses) */\r\n            var eseaData = []\r\n\r\n            // Get esea accounts for this organisation\r\n            const eseaAccountsRequest = await EseaAccountService.get({ oId: organisationId })\r\n            if (eseaAccountsRequest.error) return\r\n            const eseaAccounts = eseaAccountsRequest.response.data\r\n\r\n            // Loop over esea accounts\r\n            for (var eseaAccount of eseaAccounts) {\r\n                const eseaAccountId = eseaAccount.id\r\n                // Get year and method of this esea account\r\n                const eseaAccountYear = eseaAccount.year\r\n                const eseaMethod = eseaAccount.method\r\n\r\n                // If this esea account is not for a targeted method, skip this esea account\r\n                if (!methodIds.includes(eseaMethod)) continue\r\n\r\n                // Get all survey responses for this esea account\r\n                const surveyResponseRequest = await SurveyResponseService.get({ oId: organisationId, eaId: eseaAccountId })\r\n                if (surveyResponseRequest.error) continue\r\n                const surveyResponses = surveyResponseRequest.response.data\r\n\r\n                // Loop over survey responses\r\n                for (var surveyResponse of surveyResponses) {\r\n                    // Get responses to questions\r\n                    const questionResponses = surveyResponse.question_responses\r\n\r\n                    // Loop over all questions\r\n                    for (var questionResponse of questionResponses) {\r\n                        // Retrieve indicator data and the given values\r\n                        const directIndicatorKey = questionResponse.direct_indicator_key\r\n                        const directIndicatorValue = questionResponse.value ?? questionResponse.values\r\n                        const multipleChoice = questionResponse.value === null\r\n\r\n                        // Store indicator data\r\n                        eseaData.push({\r\n                            'Indicator Key': directIndicatorKey,\r\n                            Value: directIndicatorValue,\r\n                            Year: eseaAccountYear,\r\n                            'Multiple Choice': multipleChoice\r\n                            // 'Esea Account Id': eseaAccountId,\r\n                            // 'Method Id': eseaMethod,\r\n                            // 'Indicator Id': directIndicatorId\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Return the data for all indicators\r\n            return eseaData\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.organisation-dashboard {\r\n    min-height: 600px;\r\n    position: relative;\r\n\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    height: 100%;\r\n\r\n    /* Handle edit area element */\r\n    --edit-area-width: 200px;\r\n    --edit-area-current-width: 0px;\r\n    --edit-sidebar-width: 20px;\r\n}\r\n.spinner-div {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}