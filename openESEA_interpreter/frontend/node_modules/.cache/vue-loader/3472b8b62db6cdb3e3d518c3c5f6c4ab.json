{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\HorizontalScrollBar.vue?vue&type=style&index=0&id=738a217c&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\HorizontalScrollBar.vue","mtime":1707572265283},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741014587743},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1741014602245},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1741014592996},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1741014585012},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgLnNjcm9sbEljb24gew0KICAgICAgICBjb2xvcjogZ3JleTsNCiAgICAgICAgJjpob3ZlciB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUZFRUVFOw0KICAgICAgICAgICAgY29sb3I6IGJsYWNrOw0KICAgICAgICB9DQogICAgfQ0K"},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\HorizontalScrollBar.vue"],"names":[],"mappings":";IA4HI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB;IACJ","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/HorizontalScrollBar.vue","sourceRoot":"","sourcesContent":["// used by NetworkOverview.vue\r\n\r\n<template>\r\n    <div class=\"p-p-3 p-m-3 p-shadow-2\" style=\"border: 1px solid #e2e2e2;\">\r\n        <div class=\"p-d-flex p-jc-between\">\r\n            <h3 class=\"p-text-left\"><router-link v-if=\"itemslink\" :to=\"{name: itemslink, params: { NetworkId: $route.params.NetworkId } }\" style=\"text-decoration: none; color: blue;\">{{name}}</router-link><span v-else>{{name}}</span></h3>\r\n            <h3>Page {{currentPage}} of {{itemPages}}</h3>\r\n        </div>\r\n        <div class=\"p-d-flex p-jc-between p-ai-center\" style=\"height: 150px; width: 100%;\">\r\n            <div style=\"width: 50px;\">\r\n                <div v-if=\"currentPage !== (0 && 1)\" class=\"scrollIcon p-d-flex\" @click=\"itemsScroll('left')\"> <i class=\"pi pi-angle-left p-as-center\" style=\"font-size: 3rem;\" /> </div>\r\n            </div>\r\n            <ProgressSpinner v-if=\"loading && !failedLoad\" class=\"p-ai-center\" style=\"height: 100%;\"/>\r\n            <div v-else-if=\"loading && failedLoad\" class=\"p-text-italic\">{{name}} could not be retrieved!</div>\r\n            <div v-else-if=\"items.length\" ref=\"itemss\" class=\"p-grid\" style=\"width: 100%;\">\r\n                <div v-for=\"item, index in itemsbar\" :key=\"item\" @mouseover=\"item.hover=true\" @mouseleave=\"item.hover=false\" :class=\"'p-col'\">\r\n                    <div class=\"p-grid\" :class=\"((item.hover && !item.placeholder) ? 'p-shadow-5 p-mx-0 p-text-bold' : 'p-shadow-1 p-mx-2')\" style=\"height: 150px;\" :style=\"[item.placeholder ? 'background-color: lightgrey' : 'background-color: #F3F3F3', (item.hover && !item.placeholder) ? 'background-color: white' : '']\" @click.left=\"goToItem(item)\">\r\n                        <p v-if=\"item.name\" class=\"p-as-center\" style=\"width: 100%;\">{{index + 1}}. {{item.name}}</p>\r\n                        <h5 v-if=\"item.method\" class=\"p-as-center\" style=\"width: 100%;\">{{item.method_name}}</h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <h3 v-else-if=\"permission\" class=\"p-text-italic p-text-light\">\r\n                <slot></slot>\r\n            </h3>\r\n            <h3 v-else>\r\n                None to show\r\n            </h3>\r\n            <div style=\"width: 50px;\">\r\n                <div v-if=\"currentPage !== itemPages\" class=\"scrollIcon p-d-flex\" @click=\"itemsScroll('right')\"> <i class=\"pi pi-angle-right p-as-center\" style=\"font-size: 3rem;\" /> </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import ProgressSpinner from 'primevue/progressspinner'\r\n\r\n    export default {\r\n        components: {\r\n            ProgressSpinner\r\n        },\r\n        props: {\r\n            items: {\r\n                type: Array\r\n            },\r\n            name: {\r\n                type: String,\r\n                required: true\r\n            },\r\n            permission: {\r\n                type: Boolean,\r\n                required: false\r\n            }\r\n        },\r\n        data () {\r\n            return {\r\n                loading: true,\r\n                failedLoad: false,\r\n                itemsbar: [],\r\n                currentPage: 1,\r\n                itemsPerPage: 4\r\n            }\r\n        },\r\n        computed: {\r\n            itemPages () {\r\n                const page = Math.ceil(this.items.length / this.itemsPerPage)\r\n                return page\r\n            }\r\n        },\r\n        watch: {\r\n            items: function () {\r\n                if (this.items) {\r\n                    this.checkWindowSize()\r\n                }\r\n            }\r\n        },\r\n        created () {\r\n            // Gets window size in order to show correct amount of items\r\n            window.addEventListener('resize', this.checkWindowSize)\r\n            setTimeout(() => { this.failedLoad = true }, 10000)\r\n        },\r\n        methods: {\r\n            checkWindowSize () {\r\n                const itemWidth = this.$refs.itemss?.clientWidth\r\n                if (itemWidth) {\r\n                    this.itemsPerPage = Math.floor(itemWidth / 250)\r\n                }\r\n\r\n                if (this.currentPage > this.itemPages) {\r\n                    this.currentPage = this.itemPages\r\n                }\r\n                this.changeDisplayedItems()\r\n            },\r\n            changeDisplayedItems () {\r\n                this.itemsbar = this.items.slice(((this.currentPage - 1) * this.itemsPerPage), (this.currentPage * this.itemsPerPage))\r\n\r\n                if (!this.itemsbar.length || (this.itemsbar.length % this.itemsPerPage !== 0)) {\r\n                    const placeholderItems = this.itemsPerPage - (this.itemsbar.length % this.itemsPerPage)\r\n                    for (let i = 0; i < placeholderItems; i++) {\r\n                        this.itemsbar.push({ hover: false, placeholder: true })\r\n                    }\r\n                }\r\n                if (this.items) {\r\n                    this.loading = false\r\n                }\r\n            },\r\n            itemsScroll (direction) {\r\n                if (direction === 'left' && this.currentPage > 1) {\r\n                    this.currentPage--\r\n                }\r\n                if (direction === 'right' && this.currentPage < this.itemPages) {\r\n                    this.currentPage++\r\n                }\r\n                this.changeDisplayedItems()\r\n            },\r\n            goToItem (item) {\r\n                this.$emit('clicked-item', item, this.name.toLowerCase())\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .scrollIcon {\r\n        color: grey;\r\n        &:hover {\r\n            background-color: #EFEEEE;\r\n            color: black;\r\n        }\r\n    }\r\n</style>\r\n"]}]}