{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\charts\\GroupedBarChart.vue?vue&type=template&id=0391757b","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\charts\\GroupedBarChart.vue","mtime":1707572265297},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1741014593746},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1741014602863},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgPHZ1ZS1lY2hhcnRzIDpvcHRpb249ImNyZWF0ZU9wdGlvbnMoY2hhcnREYXRhKSIgYXV0b3Jlc2l6ZT4NCiAgICA8L3Z1ZS1lY2hhcnRzPg0K"},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\charts\\GroupedBarChart.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/dashboard/visualisations/charts/GroupedBarChart.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <vue-echarts :option=\"createOptions(chartData)\" autoresize>\r\n    </vue-echarts>\r\n</template>\r\n\r\n<script>\r\nimport 'echarts'\r\nimport ECharts from 'vue-echarts'\r\nimport { use } from 'echarts/core'\r\nimport { BarChart } from 'echarts/charts'\r\nimport { CanvasRenderer } from 'echarts/renderers'\r\n\r\nuse([BarChart, CanvasRenderer])\r\n\r\nexport default {\r\n    components: {\r\n        'vue-echarts': ECharts\r\n    },\r\n    props: {\r\n        chartData: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    methods: {\r\n        createOptions (chartData) {\r\n            console.log(chartData)\r\n            const title = chartData.title\r\n            const titleOptions = {\r\n                text: title,\r\n                left: 'center',\r\n                textStyle: {\r\n                    overflow: 'break',\r\n                    fontSize: 12,\r\n                    width: this.$parent.$el.clientWidth\r\n                }\r\n            }\r\n            const mapping = chartData?.mapping\r\n            if (!mapping) return { title: titleOptions }\r\n            const data = chartData.data\r\n            const categoryKey = mapping?.['Category Field']?.key\r\n            const groupingKey = mapping?.['Grouping Field']?.key\r\n            const valueKey = mapping?.['Value Field']?.key\r\n            if (!categoryKey || !groupingKey || !valueKey) return { title: titleOptions }\r\n            const categoryName = mapping?.['Category Field']?.name\r\n            const groupingName = mapping?.['Grouping Field']?.name\r\n            const valueName = mapping?.['Value Field']?.name\r\n\r\n            const categoryList = data.map(row => row[categoryKey])\r\n            const groupList = data.map(row => row[groupingKey])\r\n\r\n            // Get distinct categories and groups to make lists of values\r\n            const categories = [...new Set(categoryList)]\r\n            const groups = [...new Set(groupList)]\r\n            const dataLists = groups.map(\r\n                group => {\r\n                    return {\r\n                        group: group,\r\n                        values: categories.map(\r\n                            category => {\r\n                                return data.find(row => row[groupingKey] === group && row[categoryKey] === category)?.[valueKey]\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            )\r\n\r\n            // Encapsulate in series object\r\n            const series = dataLists.map(data => { return { type: 'bar', group: 'Group', data: data.values, name: data.group } })\r\n\r\n            const chartOptions = chartData.options\r\n            const categoryLimit = chartOptions?.categoryLimit ?? 0\r\n            const sideways = chartOptions?.sideways\r\n\r\n            var sliderObject = null\r\n            if (categoryLimit > 0) {\r\n                sliderObject = {\r\n                    type: 'slider', // Create a slider\r\n                    show: true, // Show It\r\n                    xAxisIndex: sideways ? [] : [0], // Show on correct axis\r\n                    yAxisIndex: sideways ? [0] : [], // Show on correct axis\r\n                    startValue: 0, // Show `categoryLimit` values, first starting at index 0\r\n                    endValue: categoryLimit - 1, // Show `categoryLimit` values\r\n                    handleSize: 0, // Disable handles at the edge of the slider\r\n                    zoomLock: true, // Prevent adjusting the slider size\r\n                    showDataShadow: false, // Hide the miniature chart\r\n                    brushSelect: false // Prevent arbitrary brush selection\r\n                }\r\n            }\r\n\r\n            const categoryAxis = {\r\n                type: 'category',\r\n                data: categories,\r\n                name: categoryName,\r\n                axisLabel: {\r\n                    interval: 0\r\n                }\r\n            }\r\n            const valueAxis = {\r\n                type: 'value',\r\n                name: valueName\r\n            }\r\n            const xAxis = sideways ? valueAxis : categoryAxis\r\n            const yAxis = sideways ? categoryAxis : valueAxis\r\n\r\n            const options = {\r\n                title: titleOptions,\r\n                xAxis: xAxis,\r\n                yAxis: yAxis,\r\n                dataZoom: [sliderObject],\r\n                grid: {\r\n                    top: '15%',\r\n                    bottom: sliderObject && !sideways ? '20%' : '5%',\r\n                    left: '5%',\r\n                    right: sliderObject && sideways ? '20%' : '5%',\r\n                    containLabel: true\r\n                },\r\n                tooltip: {\r\n                    formatter: function (params) {\r\n                        return params.name + '<br/>' + params.marker + params.seriesName + '&nbsp;&nbsp;&nbsp;&nbsp;' + '<b>' + params.value + '</b>'\r\n                    },\r\n                    trigger: 'item'\r\n                },\r\n                legend: {\r\n                    orient: 'horizontal',\r\n                    bottom: sliderObject && !sideways ? '10%' : '0%',\r\n                    name: groupingName\r\n                },\r\n                series: series\r\n            }\r\n            return options\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]}]}