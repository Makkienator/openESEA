{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\CampaignForm.vue?vue&type=style&index=0&id=975197f8&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\CampaignForm.vue","mtime":1707572265301},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741014587743},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1741014602245},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1741014592996},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1741014585012},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgLmJvcmRlcmxlc3Mgew0KICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmVkOw0KDQogICAgfQ0K"},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\CampaignForm.vue"],"names":[],"mappings":";IA+JI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEhC","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/forms/CampaignForm.vue","sourceRoot":"","sourcesContent":["// used by NetworkCampaigns.vue\r\n\r\n<template>\r\n    <form id=\"campaignform\" @submit.prevent=\"createNewCampaign\" class=\"p-input-filled p-fluid p-text-left\">\r\n        <div class=\"p-field \">\r\n            <label for=\"name\">Name<span style=\"color:red\">*</span></label>\r\n            <InputText id=\"name\" v-model.trim=\"campaignForm.name\" :class=\"{'p-invalid': v$.campaignForm.name.$error}\" />\r\n            <div class=\"p-error p-text-italic\" v-for=\"error in nameErrors\" :key=\"error\">{{error}}</div>\r\n        </div>\r\n\r\n        <div class=\"p-grid\">\r\n            <div class=\"p-field p-col-6\">\r\n                <label for=\"method\">Method<span style=\"color:red\">*</span></label>\r\n                <Dropdown id=\"method\" v-model=\"campaignForm.method\" :options=\"methods\"  optionLabel=\"name\" optionValue=\"id\" placeholder=\"Select a Method\" :class=\"{'p-invalid': v$.campaignForm.method.$error}\" />\r\n                <div class=\"p-error p-text-italic\" v-for=\"error in methodErrors\" :key=\"error\">{{error}}</div>\r\n            </div>\r\n\r\n            <div class=\"p-field p-col-6\">\r\n                <label for=\"organisations\">Organisations</label>\r\n                <MultiSelect id=\"organisations\" v-model=\"selectedOrganisations\" :options=\"organisations\" optionLabel=\"name\" placeholder=\"Select Organisations\" :filter=\"true\" class=\"multiselect-custom\" :class=\"{'p-invalid': v$.campaignForm.organisations.$error}\">\r\n                    <template #value=\"slotProps\">\r\n                        <div v-for=\"option of slotProps.value\" :key=\"option.code\">\r\n                            <div>{{option.name}}</div>\r\n                        </div>\r\n                        <template v-if=\"!slotProps.value || slotProps.value.length === 0\">\r\n                            Select Organisations\r\n                        </template>\r\n                    </template>\r\n                    <template #option=\"slotProps\">\r\n                        <div class=\"country-item\">\r\n                            <div>{{slotProps.option.name}}</div>\r\n                        </div>\r\n                    </template>\r\n                </MultiSelect>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"p-grid\">\r\n            <div class=\"p-field p-col-6 p-m-0\">\r\n                <label for=\"opendate\">Opening Date</label>\r\n                <Calendar id=\"opendate\" v-model=\"campaignForm.open_survey_date\" placeholder=\"Calendar\" appendTo=\"body\" :showTime=\"true\" :showIcon=\"true\" />\r\n                <div class=\"p-error p-text-italic\" v-for=\"error in openingDateErrors\" :key=\"error\"><small>{{error}}</small></div>\r\n            </div>\r\n            <div class=\"p-field p-col-6\">\r\n                <label for=\"enddate\">Closing Date</label>\r\n                <Calendar id=\"enddate\" v-model=\"campaignForm.close_survey_date\" placeholder=\"Calendar\" appendTo=\"body\" showTime=\"true\" :showIcon=\"true\" />\r\n                <div class=\"p-error p-text-italic\" v-for=\"error in closingDateErrors\" :key=\"error\"><small>{{error}}</small></div>\r\n            </div>\r\n        </div>\r\n        <div class=\"p-field\">\r\n            <label for=\"description\">Description</label>\r\n            <Textarea id=\"description\" v-model=\"something\" :autoResize=\"true\" rows=\"3\" />\r\n        </div>\r\n        <div class=\"p-field\">\r\n            <label for=\"message\">Message to Organisations</label>\r\n            <Textarea id=\"message\" v-model=\"something\" :autoResize=\"true\" rows=\"3\" />\r\n        </div>\r\n\r\n        <div class=\"p-d-flex p-jc-between\">\r\n            <Button label=\"Cancel\" icon=\"pi pi-times\" class=\"p-button-text\" @click=\"closeDialog\" style=\"width: 100px\" />\r\n            <Button type=\"submit\" form=\"campaignform\" label=\"Save\" icon=\"pi pi-check\" class=\"p-button-text\" :disabled=\"v$.campaignForm.$error\" style=\"width: 100px\" />\r\n        </div>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\n    import { mapActions, mapState } from 'vuex'\r\n    import useVuelidate from '@vuelidate/core'\r\n    import { required, minLength, maxLength } from 'vuelidate/lib/validators'\r\n    import HandleValidationErrors from '../../utils/HandleValidationErrors'\r\n    import Calendar from 'primevue/calendar'\r\n    import Dropdown from 'primevue/dropdown'\r\n    import MultiSelect from 'primevue/multiselect'\r\n\r\n    export default {\r\n        components: {\r\n            Calendar,\r\n            Dropdown,\r\n            MultiSelect\r\n        },\r\n        data () {\r\n            return {\r\n                selectedOrganisations: [],\r\n                campaignForm: {\r\n                    name: null,\r\n                    network: this.$route.params.NetworkId,\r\n                    method: null,\r\n                    organisations: [],\r\n                    open_survey_date: new Date(),\r\n                    close_survey_date: new Date()\r\n                }\r\n            }\r\n        },\r\n        // Validation of the Campaign Form\r\n        setup: () => ({ v$: useVuelidate() }),\r\n        validations: {\r\n            campaignForm: {\r\n                name: { required, minLength: minLength(4), maxLength: maxLength(255) },\r\n                network: { required },\r\n                method: { required },\r\n                organisations: {},\r\n                open_survey_date: {},\r\n                close_survey_date: {}\r\n            }\r\n        },\r\n        computed: {\r\n            ...mapState('campaign', ['campaign', 'error']),\r\n            ...mapState('network', ['network']),\r\n            ...mapState('method', ['methods']),\r\n            ...mapState('organisation', ['organisations']),\r\n            nameErrors () {\r\n                return HandleValidationErrors(this.v$.campaignForm.name, this.error.name)\r\n            },\r\n            methodErrors () {\r\n                return HandleValidationErrors(this.v$.campaignForm.method, this.error.method)\r\n            },\r\n            openingDateErrors () {\r\n                return HandleValidationErrors(this.v$.campaignForm.open_survey_date, this.error.open_survey_date)\r\n            },\r\n            closingDateErrors () {\r\n                return HandleValidationErrors(this.v$.campaignForm.close_survey_date, this.error.close_survey_date)\r\n            }\r\n        },\r\n        created () {\r\n            this.fetchMethods({ query: `?network=${this.network?.id || 0}` })\r\n            this.initialize()\r\n        },\r\n        methods: {\r\n            ...mapActions('organisation', ['fetchOrganisations']),\r\n            ...mapActions('campaign', ['createCampaign', 'setCampaign']),\r\n            ...mapActions('method', ['fetchMethods']),\r\n            async initialize () {\r\n                // Sets the campaign's surveys closing date to 30 days from now as default\r\n                this.campaignForm.close_survey_date = new Date(this.campaignForm.close_survey_date.setDate(this.campaignForm.open_survey_date.getDate() + 30))\r\n                await this.setCampaign({})\r\n                await this.fetchOrganisations({ query: `?network=${this.$route.params.NetworkId}` })\r\n            },\r\n            async createNewCampaign () {\r\n                this.v$.campaignForm.$touch()\r\n                if (this.v$.$invalid) { return }\r\n                if (this.selectedOrganisations.length) {\r\n                    for (var organisation of this.selectedOrganisations) {\r\n                        this.campaignForm.organisations.push(organisation.name)\r\n                    }\r\n                }\r\n                await this.createCampaign({ nId: this.$route.params.NetworkId, data: this.campaignForm })\r\n                this.closeDialog()\r\n                if (this.campaign.id) {\r\n                    this.$router.push({ name: 'networkcampaign', params: { NetworkId: this.$route.params.NetworkId, CampaignId: this.campaign.id } })\r\n                }\r\n            },\r\n            closeDialog () {\r\n                this.$emit('closedialog')\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .borderless {\r\n        border-bottom: 1px solid red;\r\n\r\n    }\r\n</style>\r\n"]}]}