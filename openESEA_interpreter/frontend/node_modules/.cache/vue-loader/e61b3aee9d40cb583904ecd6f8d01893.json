{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\tables\\Table.vue?vue&type=style&index=0&id=56955050&lang=css","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\tables\\Table.vue","mtime":1708979735272},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741014587743},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1741014602245},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1741014592996},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudGFibGUgew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGhlaWdodDogMTAwJTsNCn0NCg=="},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\tables\\Table.vue"],"names":[],"mappings":";AA8EA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACH,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChB","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/dashboard/visualisations/tables/Table.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <div class=\"table\">\r\n        <DataTable showGridlines\r\n            :value=\"data\"\r\n            :paginator=\"true\" :rows=\"10\"\r\n            :rowsPerPageOptions=\"[lowerRowLimit, higherRowLimit]\">\r\n            <template #header v-if=\"title\">\r\n                <div class=\"flex flex-wrap align-items-center justify-content-between gap-2\">\r\n                    <span class=\"text-xl text-900 font-bold\">{{ title }}</span>\r\n                </div>\r\n            </template>\r\n            <Column v-for=\"field of fields\" :key=\"field.key\" :field=\"field.key\" :header=\"field.name\">\r\n            </Column>\r\n        </DataTable>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\n\r\nexport default {\r\n    name: 'Table',\r\n    components: {\r\n        DataTable,\r\n        Column\r\n    },\r\n    props: {\r\n        chartData: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    computed: {\r\n        lowerRowLimit: {\r\n            get () { return (this.chartData.options?.categoryLimit === null || this.chartData.options?.categoryLimit === undefined) ? 5 : this.chartData.options?.categoryLimit }\r\n        },\r\n        higherRowLimit: {\r\n            get () { return (this.chartData.options?.categoryLimit === null || this.chartData.options?.categoryLimit === undefined) ? 10 : (this.chartData.options?.categoryLimit * 2) }\r\n        },\r\n        data: {\r\n            get () { return this.getData(this.chartData) }\r\n        },\r\n        fields: {\r\n            get () { return this.listFields(this.chartData) }\r\n        },\r\n        title: {\r\n            get () { return this.getTitle(this.chartData) }\r\n        }\r\n    },\r\n    methods: {\r\n        getData (chartData) {\r\n            return chartData.data\r\n        },\r\n        listFields (chartData) {\r\n            const mapping = chartData.mapping\r\n            if (!mapping) return []\r\n            var fields = []\r\n            const categoryFieldData = mapping?.['Category Field']\r\n            if (categoryFieldData) fields.push(this.getFieldInfo(categoryFieldData))\r\n            const valueFieldData = mapping?.['Value Field']\r\n            if (valueFieldData) fields.push(this.getFieldInfo(valueFieldData))\r\n            return fields\r\n        },\r\n        getFieldInfo (fieldData) {\r\n            const fieldKey = fieldData.key\r\n            const fieldName = fieldData?.name ?? fieldData.key\r\n            const info = { key: fieldKey, name: fieldName }\r\n            return info\r\n        },\r\n        getTitle (chartData) {\r\n            return chartData.title\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.table {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n</style>\r\n"]}]}