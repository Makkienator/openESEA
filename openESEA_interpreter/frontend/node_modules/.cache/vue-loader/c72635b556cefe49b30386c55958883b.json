{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\TopicForm.vue?vue&type=style&index=0&id=0af46133&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\TopicForm.vue","mtime":1707572265305},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741014587743},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1741014602245},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1741014592996},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1741014585012},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoucC1pbnB1dHRleHQgew0KICAgIGJvcmRlcjogbm9uZTsNCiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgbGlnaHRncmV5Ow0KfQ0KLmJvcmRlcmxlc3Mgew0KICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZWQ7DQoNCn0NCg=="},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\TopicForm.vue"],"names":[],"mappings":";AA4KA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEhC","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/forms/TopicForm.vue","sourceRoot":"","sourcesContent":["// used by MethodTopicCreation.vue\r\n\r\n<template>\r\n    <form v-if=\"active\" ref=\"form\" class=\"p-d-flex p-m-0 p-fluid p-text-left\"\r\n        :style=\"[(active) ? 'border: 2px solid #9ecaed;':'border: 1px solid lightgrey;', (valid) ? '': 'border: 2px solid rgba(255, 0, 0, 0.5);']\"> <!-- @submit.prevent=\"!v$.$invalid\" -->\r\n        <!-- {{activeTopic}} <hr> {{topic}} <hr> {{activeTopic}} {{v$.$invalid}} -->\r\n        <div class=\"p-pl-2\" style=\"width: 40px;\">\r\n            <ProgressSpinner v-if=\"(loading && !failedToUpDate)\" style=\"width: 35px;\"/>\r\n            <i v-else-if=\"!valid\" class=\"pi pi-refresh p-d-flex p-jc-center p-ai-center\" style=\"font-size: 30px; height: 100%; color: #ff6666; cursor: pointer;\" @click=\"updateThisTopic()\" />\r\n            <i v-if=\"valid\" class=\"pi pi-check p-d-flex p-jc-center p-ai-center\" style=\"font-size: 30px; height: 100%; color: #9ecaed;\" /> <!-- rgba(0, 153, 51, 1) -->\r\n        </div>\r\n        <div class=\"p-grid\" style=\"width: 100%;\">\r\n            <div class=\"p-pl-3 p-pt-3\" style=\"width: 90%;\">\r\n                <div class=\"p-field\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"topicname\" ref=\"input\" v-model.lazy=\"lazyTopic.name\" :placeholder=\"nameLabel\" :class=\"{'borderless': nameErrors.length }\" @blur=\"v$.lazyTopic.name.$touch()\" />\r\n                    </span>\r\n                    <div class=\"p-error p-text-italic\" v-for=\"error in nameErrors\" :key=\"error\"><small>{{error}}</small></div>\r\n                </div>\r\n                <div class=\"p-field\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText v-model.lazy=\"lazyTopic.description\" placeholder=\"Topic Description\" class=\"p-inputtext-sm\" @blur=\"v$.lazyTopic.description.$touch()\" />\r\n                    </span>\r\n                    <div class=\"p-error p-text-italic\" v-for=\"error in descriptionErrors\" :key=\"error\"><small>{{error}}</small></div>\r\n                </div>\r\n            </div>\r\n            <i class=\"pi pi-trash p-d-flex p-jc-center p-ai-center\" style=\"width: 10%; font-size: 30px; color: #ff6666; cursor: pointer;\" @click=\"removeTopic()\" />\r\n        </div>\r\n                <!-- <i class=\"pi pi-ellipsis-v\" style=\"font-size: 30px; cursor: not-allowed;\" <div class=\"p-d-flex p-ai-center p-jc-end\"> /> -->\r\n    </form>\r\n    <topic-card v-else :name=\"lazyTopic.name\" :description=\"lazyTopic.description\" :is-sub-topic=\"!isMainTopic\" :style=\"[(!v$.lazyTopic.$invalid && lazyTopic.id > 0) ? 'border: 1px solid green;': 'border: 1px solid rgba(255, 0, 0, 0.3);']\" />\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex'\r\nimport { isEqual } from 'lodash'\r\nimport HandleValidationErrors from '../../utils/HandleValidationErrors'\r\nimport { required, maxLength } from '../../utils/validators'\r\nimport useVuelidate from '@vuelidate/core'\r\nimport TopicCard from '../../components/cards/TopicCard'\r\nimport ProgressSpinner from 'primevue/progressspinner'\r\n\r\nexport default {\r\n    emits: [''],\r\n    components: {\r\n        TopicCard,\r\n        ProgressSpinner\r\n    },\r\n    props: {\r\n        topic: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        active: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        errors: {\r\n            type: Object,\r\n            default: () => ({})\r\n        },\r\n        checkSavingStatus: {\r\n            type: Boolean\r\n        }\r\n    },\r\n    setup: () => ({ v$: useVuelidate() }),\r\n    validations: {\r\n        lazyTopic: {\r\n            name: { required, maxLength: maxLength(120) }, // $lazy: true\r\n            description: { maxLength: maxLength(255) }\r\n        }\r\n    },\r\n    data () {\r\n        return {\r\n            lazyTopic: { ...this.topic } || {},\r\n            loading: false,\r\n            failedToUpDate: false\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapState('topic', { activeTopic: 'topic' }),\r\n        isMainTopic () {\r\n            return !this.lazyTopic.parent_topic\r\n        },\r\n        nameLabel () {\r\n            return this.isMainTopic ? 'Topic name' : 'Sub topic name'\r\n        },\r\n        nameErrors () {\r\n            return HandleValidationErrors(\r\n                this.v$.lazyTopic.name,\r\n                this.errors.name\r\n            )\r\n        },\r\n        descriptionErrors () {\r\n            return HandleValidationErrors(\r\n                this.v$.lazyTopic.description,\r\n                this.errors.description\r\n            )\r\n        },\r\n        valid () {\r\n            return (!this.v$.lazyTopic.$invalid && (this.lazyTopic.id > 0) && this.uptodate)\r\n        },\r\n        uptodate () {\r\n            return (isEqual(this.topic, this.lazyTopic))\r\n        }\r\n    },\r\n    watch: {\r\n        topic (val) {\r\n            this.loading = false\r\n            if (isEqual(this.lazyTopic, val)) { return }\r\n            this.lazyTopic = { ...val }\r\n        },\r\n        lazyTopic: {\r\n            handler (val) {\r\n                this.failedToUpDate = false\r\n            setTimeout(() => {\r\n                if (isEqual(this.topic, this.lazyTopic) && this.lazyTopic.id > 0) { return }\r\n                this.v$.lazyTopic.$touch()\r\n                if (this.v$.lazyTopic.$invalid) { return }\r\n                this.updateThisTopic()\r\n                }, 200)\r\n            },\r\n            deep: true\r\n        },\r\n        active (val) {\r\n            this.v$.lazyTopic.$touch()\r\n        },\r\n        checkSavingStatus (val) {\r\n            this.$emit('savingstatus', this.v$.lazyTopic.$invalid)\r\n        }\r\n    },\r\n    methods: {\r\n        ...mapActions('topic', ['updateTopic', 'deleteTopic']),\r\n        async updateThisTopic () {\r\n            this.loading = true\r\n            this.failedToUpDate = false\r\n            setTimeout(() => { this.failedToUpDate = true }, 5000)\r\n            await this.updateTopic({\r\n                mId: this.$route.params.id,\r\n                topic: this.lazyTopic\r\n            })\r\n        },\r\n        updateName () {\r\n            this.v$.lazyTopic.name.$touch()\r\n        },\r\n        updateDescription () {\r\n            this.v$.lazyTopic.description.$touch()\r\n        },\r\n        async removeTopic () {\r\n            await this.deleteTopic({ mId: this.$route.params.id, id: this.lazyTopic.id })\r\n            this.$emit('refreshsidebar', true)\r\n        }\r\n    }\r\n}\r\n// else {\r\n//     this.$nextTick(() => this.$refs.input && this.$refs.input.focus())\r\n// }\r\n// mounted () {\r\n//     if (!this.activeTopic.name) {\r\n//         this.$refs.topicname.focus()\r\n//     }\r\n// },\r\n// initialize () {\r\n// if (this.activeTopic.name === 'topic') {\r\n//     const name = this.activeTopic.parent_topic ? 'subtopic' : 'topic'\r\n//     this.activeTopic.name = `Untitled ${name}`\r\n// }\r\n// },\r\n// @focus=\"$event.target.select()\"\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.p-inputtext {\r\n    border: none;\r\n    border-bottom: 1px solid lightgrey;\r\n}\r\n.borderless {\r\n    border-bottom: 1px solid red;\r\n\r\n}\r\n</style>\r\n"]}]}