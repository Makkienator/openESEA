{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\FormulaFormCorrect.vue?vue&type=style&index=0&id=5aeba3d0&lang=scss&scoped=true","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\FormulaFormCorrect.vue","mtime":1707572265303},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741014587743},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1741014602245},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1741014592996},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1741014585012},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgICAgIC5hdXRvY29tcGxldGUtaXRlbSB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsNCiAgICAgICAgfQ0KICAgICAgICAuYXV0b2NvbXBsZXRlLWl0ZW06aG92ZXIgew0KICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmV5Ow0KICAgICAgICB9DQo="},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\forms\\FormulaFormCorrect.vue"],"names":[],"mappings":";QAkJQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3B;QACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/B","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/forms/FormulaFormCorrect.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <div class=\"p-d-flex p-ai-center p-m-0\" style=\"\">\r\n        <div ref=\"focuswindow\" style=\"position: relative; width: 100%;\">\r\n            <Textarea ref=\"expression\" :autoResize=\"true\" rows=\"1\" v-model=\"lazyFormula\" :placeholder=\"(assignment) ? 'Type #ife  or #iff for either an empty or filled if/else statement. Type [ to insert an indicator.' : 'Write any expression you want here. Typing [ will pop up an autocomplete list.'\" style=\"width: 100%; position: relative;\" autocomplete=\"off\" />\r\n            <div id=\"autocomplete\" v-if=\"autoComplete\" style=\"width: 100%; position: absolute; z-index: 50;\">\r\n                <div v-for=\"indicator in indicators\" :key=\"indicator\" class=\"autocomplete-item\" style=\"padding: 4px; border: 0.5px solid lightgrey; cursor: pointer; position: relative;\" @click=\"chooseIndicator(indicator)\">{{indicator.key}}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import { mapState } from 'vuex'\r\n\r\n    export default {\r\n        components: {\r\n        },\r\n        props: {\r\n            formula: {\r\n                type: String,\r\n                default: ''\r\n            },\r\n            keyy: {\r\n                type: String\r\n            }\r\n        },\r\n        data () {\r\n            return {\r\n                lazyFormula: this.formula || '',\r\n                autoComplete: false,\r\n                positionLeft: null,\r\n                positionRight: null\r\n            }\r\n        },\r\n        computed: {\r\n            ...mapState('directIndicator', ['directIndicators']),\r\n            ...mapState('indirectIndicator', ['indirectIndicators', 'indirectIndicator']),\r\n            indicators () {\r\n                return this.directIndicators.concat(this.indirectIndicators)\r\n            }\r\n        },\r\n        watch: {\r\n            lazyFormula (val) {\r\n                this.lazyFormula = val.replace(' then', '\\nthen')\r\n                this.lazyFormula = val.replace(' else', '\\nelse')\r\n                console.log(val)\r\n                this.$emit('output', val)\r\n            }\r\n        },\r\n        mounted () {\r\n            const self = this\r\n            this.$refs.expression.$el.addEventListener('keyup', self.checkUserPosition, false)\r\n            this.$refs.expression.$el.addEventListener('click', self.checkUserPosition, false)\r\n            document.addEventListener('click', function (event) {\r\n                if (self.$refs.focuswindow !== event.target && !self.$refs.focuswindow?.contains(event.target)) { self.removeAutoComplete() }\r\n            })\r\n        },\r\n        methods: {\r\n            showIndicators () {\r\n                this.autoComplete = true\r\n            },\r\n            removeAutoComplete () {\r\n                this.autoComplete = false\r\n            },\r\n            checkUserPosition (e) {\r\n                console.log('user is moving!')\r\n                        this.positionleft = null\r\n                        this.positionright = null\r\n                        const userPosition = e.target.selectionStart\r\n\r\n                        if (this.lazyFormula.includes('#iff')) {\r\n                            this.lazyFormula = this.lazyFormula.replace('#iff', `if ([indicator_key] = null)\\nthen [${this.keyy}] = null\\nelse [${this.keyy}] = null`)\r\n                        }\r\n                        if (this.lazyFormula.includes('#ife')) {\r\n                            this.lazyFormula = this.lazyFormula.replace('#ife', 'if () \\nthen \\nelse')\r\n                        }\r\n\r\n                        // Following three for loops look for the 1). left bracket and 2). right bracket or 3). empty space\r\n                        for (var i = userPosition - 1; i >= 0; i--) {\r\n                            if (this.lazyFormula[i] === ']') { break }\r\n                            if (this.lazyFormula[i] === '[') {\r\n                                this.positionleft = i\r\n                                break\r\n                            }\r\n                        }\r\n                        for (i = userPosition; i <= this.lazyFormula.length; i++) {\r\n                            if (this.lazyFormula[i] === '[') { break }\r\n                            if (this.lazyFormula[i] === ']') {\r\n                                this.positionright = i + 1\r\n                                break\r\n                            }\r\n                        }\r\n                        if (Number.isInteger(this.positionleft) && !this.positionright) {\r\n                            for (i = this.positionleft; i <= this.lazyFormula.length; i++) {\r\n                                if ((this.lazyFormula[i] === ')') || (this.lazyFormula[i] === ' ')) {\r\n                                    this.positionright = i\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        console.log('left: ', this.positionleft, 'right: ', this.positionright)\r\n                        if (Number.isInteger(this.positionleft)) {\r\n                            this.showIndicators()\r\n                            return\r\n                        }\r\n                        this.removeAutoComplete()\r\n            },\r\n            chooseIndicator (indicator) {\r\n                const tempString = this.lazyFormula.split('')\r\n                let removablePart = this.lazyFormula.length - this.positionleft\r\n                if (Number.isInteger(this.positionright)) {\r\n                    removablePart = (this.positionright) - (this.positionleft)\r\n                }\r\n                tempString.splice((this.positionleft), removablePart, `[${indicator.key}]`)\r\n                this.lazyFormula = tempString.join('')\r\n                this.removeAutoComplete()\r\n            }\r\n        }\r\n    }\r\n    // findIndicators (string) {\r\n//     let results = []\r\n//     this.getAllResults()\r\n\r\n// },\r\n// getAllResults (string) {\r\n//      if(string.indexOf('[') >= 0 || string.indexOf(']') >= 0) {\r\n\r\n//      }\r\n// }\r\n// const selectableIndirectIndicators = this.indirectIndicators.filter(item => item.id !== this.indirectIndicator.id)\r\n// (this.positionright - (this.positionLeft + 1)) (this.positionright - (this.positionLeft + 1))\r\n// comparisonOperators: [\r\n//     { id: 0, value: '==', component: null },\r\n//     { id: 1, value: '!-', component: null },\r\n//     { id: 2, value: '>', component: null },\r\n//     { id: 3, value: '<', component: null },\r\n//     { id: 4, value: '>=', component: null },\r\n//     { id: 5, value: '<=', component: null }\r\n// ],\r\n// if (val.length) {\r\n//     const pattern = /[\\s?[\\w\\s]*\\s?]/g\r\n//     this.result = [...val.matchAll(pattern)]\r\n// }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n        .autocomplete-item {\r\n            background-color: white;\r\n        }\r\n        .autocomplete-item:hover {\r\n            background-color: lightgrey;\r\n        }\r\n</style>\r\n"]}]}