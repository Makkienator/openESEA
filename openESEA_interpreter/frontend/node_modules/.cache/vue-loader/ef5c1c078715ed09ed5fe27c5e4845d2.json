{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\views\\organisation\\OrganisationDashboard.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\views\\organisation\\OrganisationDashboard.vue","mtime":1708979735272},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1741014593746},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgeyBpc0VxdWFsLCBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gnDQoNCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBHZXR0ZXJzLCBtYXBNdXRhdGlvbnMsIG1hcEFjdGlvbnMgfSBmcm9tICd2dWV4Jw0KDQppbXBvcnQgRXNlYUFjY291bnRTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL0VzZWFBY2NvdW50U2VydmljZS5qcycNCmltcG9ydCBTdXJ2ZXlSZXNwb25zZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvU3VydmV5UmVzcG9uc2VTZXJ2aWNlLmpzJw0KaW1wb3J0IERpcmVjdEluZGljYXRvclNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvRGlyZWN0SW5kaWNhdG9yU2VydmljZS5qcycNCmltcG9ydCBJbmRpcmVjdEluZGljYXRvclNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvSW5kaXJlY3RJbmRpY2F0b3JTZXJ2aWNlLmpzJw0KDQppbXBvcnQgRGFzaGJvYXJkIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZGFzaGJvYXJkL0Rhc2hib2FyZC52dWUnDQppbXBvcnQgRGFzaGJvYXJkRWRpdGluZ1NlY3Rpb24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9kYXNoYm9hcmQvRGFzaGJvYXJkRWRpdGluZ1NlY3Rpb24udnVlJw0KDQppbXBvcnQgUHJvZ3Jlc3NTcGlubmVyIGZyb20gJ3ByaW1ldnVlL3Byb2dyZXNzc3Bpbm5lcicNCmltcG9ydCBEaWFsb2cgZnJvbSAncHJpbWV2dWUvZGlhbG9nJw0KDQpleHBvcnQgZGVmYXVsdCB7DQogICAgY29tcG9uZW50czogew0KICAgICAgICBEYXNoYm9hcmRFZGl0aW5nU2VjdGlvbiwNCiAgICAgICAgRGFzaGJvYXJkLA0KDQogICAgICAgIFByb2dyZXNzU3Bpbm5lciwNCiAgICAgICAgRGlhbG9nDQogICAgfSwNCiAgICBkYXRhICgpIHsNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgIC8vIFJvdXRlIHBhcmFtZXRlcnMgZm9yIG9yZ2FuaXNhdGlvbiBhbmQgZGFzaGJvYXJkIGlkcw0KICAgICAgICAgICAgb3JnYW5pc2F0aW9uSWQ6IHRoaXMuJHJvdXRlLnBhcmFtcy5PcmdhbmlzYXRpb25JZCwNCiAgICAgICAgICAgIGRhc2hib2FyZElkOiB0aGlzLiRyb3V0ZS5wYXJhbXMuRGFzaGJvYXJkSWQsDQoNCiAgICAgICAgICAgIGRhc2hib2FyZExvYWRlZDogZmFsc2UsDQoNCiAgICAgICAgICAgIGluaXRpYWxEYXNoYm9hcmQ6IG51bGwsDQoNCiAgICAgICAgICAgIHNob3dEaWFsb2c6IGZhbHNlLA0KDQogICAgICAgICAgICBmZXRjaFN1Z2dlc3Rpb25zVGltZXI6IG51bGwsDQoNCiAgICAgICAgICAgIHRlc3Rpbmc6IHRydWUNCiAgICAgICAgfQ0KICAgIH0sDQogICAgY29tcHV0ZWQ6IHsNCiAgICAgICAgLy8gLi4ubWFwU3RhdGUoJ25ldHdvcmsnLCBbJ25ldHdvcmtzJ10pLA0KICAgICAgICAuLi5tYXBTdGF0ZSgnb3JnYW5pc2F0aW9uJywgWydvcmdhbmlzYXRpb24nXSksDQogICAgICAgIC4uLm1hcFN0YXRlKCdkYXNoYm9hcmRNb2RlbCcsIFsnZGFzaGJvYXJkJywgJ3NlbGVjdGlvbkNvbmZpZyddKSwNCiAgICAgICAgICAgIHBlcm1pc3Npb24gKCkgew0KICAgICAgICAgICAgICAgIGlmICh0aGlzLm9yZ2FuaXNhdGlvbi5hY2Nlc0xldmVsKSB7DQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjY2VzTGV2ZWwgPSB0aGlzLm9yZ2FuaXNhdGlvbi5hY2Nlc0xldmVsDQogICAgICAgICAgICAgICAgICAgIGlmIChhY2Nlc0xldmVsID09PSAnYWRtaW4nIHx8IGFjY2VzTGV2ZWwgPT09ICduZXR3b3JrIGFkbWluJykgew0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgICAgICAgIH0NCiAgICB9LA0KICAgIHdhdGNoOiB7DQogICAgICAgIGRhc2hib2FyZDogew0KICAgICAgICAgICAgaGFuZGxlcjogJ3VwZGF0ZVJMTW9kZWwnLA0KICAgICAgICAgICAgZGVlcDogdHJ1ZQ0KICAgICAgICB9DQogICAgfSwNCiAgICBhc3luYyBtb3VudGVkICgpIHsNCiAgICAgICAgaWYgKCF0aGlzLnRlc3RpbmcpIHsNCiAgICAgICAgICAgIHRoaXMuZmV0Y2hTdWdnZXN0aW9uc1RpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5mZXRjaERhc2hib2FyZFN1Z2dlc3Rpb25zLCAxMDAwMCkNCiAgICAgICAgfQ0KICAgIH0sDQogICAgYXN5bmMgdW5tb3VudGVkICgpIHsNCiAgICAgICAgaWYgKCF0aGlzLnRlc3RpbmcpIHsNCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5mZXRjaFN1Z2dlc3Rpb25zVGltZXIpDQogICAgICAgIH0NCiAgICB9LA0KICAgIGFzeW5jIGJlZm9yZVVubW91bnQgKCkgew0KICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy51bmxvYWQpDQogICAgfSwNCiAgICBhc3luYyBjcmVhdGVkICgpIHsNCiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMudW5sb2FkKQ0KDQogICAgICAgIC8vIEZldGNoIGxhdGVzdCB2ZXJzaW9uIG9mIGRhc2hib2FyZA0KICAgICAgICBhd2FpdCB0aGlzLmZldGNoRGFzaGJvYXJkKHsgaWQ6IHBhcnNlSW50KHRoaXMuZGFzaGJvYXJkSWQpIH0pDQogICAgICAgIC8vIExvYWQgZGFzaGJvYXJkIGZyb20gZmV0Y2hlZCBkYXNoYm9hcmQNCiAgICAgICAgYXdhaXQgdGhpcy5sb2FkRGFzaGJvYXJkRnJvbURhdGFiYXNlKCkNCiAgICAgICAgYXdhaXQgdGhpcy5zZXRJbml0aWFsRGFzaGJvYXJkKCkNCg0KICAgICAgICAvLyBJbml0aWFsaXplIFJMIG1vZGVsDQogICAgICAgIGlmICghdGhpcy50ZXN0aW5nKSB7DQogICAgICAgICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVSTE1vZGVsKCkNCiAgICAgICAgfQ0KICAgIH0sDQogICAgYXN5bmMgYmVmb3JlUm91dGVMZWF2ZSAodG8sIGZyb20sIG5leHQpIHsNCiAgICAgICAgY29uc29sZS5sb2coJ0xlYXZpbmcgcm91dGUnKQ0KICAgICAgICBpZiAoIXRoaXMuZGFzaGJvYXJkTG9hZGVkKSBuZXh0KHRydWUpDQogICAgICAgIGlmICghdGhpcy5kYXNoYm9hcmRTYXZlZCgpKSB7DQogICAgICAgICAgICB0aGlzLnNob3dEaWFsb2cgPSB0cnVlDQogICAgICAgICAgICBuZXh0KGZhbHNlKQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYgKCF0aGlzLnRlc3RpbmcpIHsNCiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3BSTE1vZGVsKCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIG5leHQodHJ1ZSkNCiAgICAgICAgfQ0KICAgIH0sDQogICAgbWV0aG9kczogew0KICAgICAgICAuLi5tYXBHZXR0ZXJzKCdkYXNoYm9hcmQnLCBbJ2dldERhc2hib2FyZCcsICdnZXREYXNoYm9hcmRzJ10pLA0KICAgICAgICAuLi5tYXBBY3Rpb25zKCdkYXNoYm9hcmQnLCBbJ3NldERhc2hib2FyZCcsICd1cGRhdGVEYXNoYm9hcmQnLCAnZmV0Y2hEYXNoYm9hcmQnXSksDQoNCiAgICAgICAgLi4ubWFwR2V0dGVycygnZGFzaGJvYXJkRGF0YScsIFsnZ2V0SW5kaWNhdG9yRGF0YVNldHMnLCAnZ2V0SW5kaWNhdG9yRmllbGRzJywgJ2dldEluZGljYXRvcnMnLCAnZ2V0VmlzdWFsaXNhdGlvbkRhdGFzZXRzJ10pLA0KICAgICAgICAuLi5tYXBNdXRhdGlvbnMoJ2Rhc2hib2FyZERhdGEnLCBbJ3NldEluZGljYXRvcnMnLCAnc2V0SW5kaWNhdG9yRGF0YScsICdzZXRJbmRpY2F0b3JGaWVsZHMnXSksDQogICAgICAgIC4uLm1hcEFjdGlvbnMoJ2Rhc2hib2FyZERhdGEnLCBbJ2NyZWF0ZUluZGljYXRvckRhdGFTZXRzJ10pLA0KDQogICAgICAgIC4uLm1hcEdldHRlcnMoJ2Rhc2hib2FyZE1vZGVsJywgWydnZXREYXNoYm9hcmRNb2RlbCcsICdnZXRNZXRob2RzJywgJ2dldE92ZXJ2aWV3JywgJ2dldENvbnRhaW5lcnMnLCAnZ2V0VmlzdWFsaXNhdGlvbnMnLCAnZ2V0VmlzdWFsaXNhdGlvblRpdGxlJywgJ2dldFZpc3VhbGlzYXRpb25UeXBlJywgJ2dldENhdGVnb3J5TGltaXQnXSksDQogICAgICAgIC4uLm1hcEFjdGlvbnMoJ2Rhc2hib2FyZE1vZGVsJywgWydjcmVhdGVEYXNoYm9hcmRNb2RlbCddKSwNCg0KICAgICAgICAuLi5tYXBBY3Rpb25zKCdkYXNoYm9hcmRTdWdnZXN0aW9ucycsIFsnYnVpbGREYXNoYm9hcmRSTE1vZGVsJywgJ3VwZGF0ZURhc2hib2FyZFJMTW9kZWwnLCAnZGVsZXRlRGFzaGJvYXJkUkxNb2RlbCcsICdmZXRjaERhc2hib2FyZFN1Z2dlc3Rpb25zJ10pLA0KDQogICAgICAgIHNldEluaXRpYWxEYXNoYm9hcmQgKCkgew0KICAgICAgICAgICAgdGhpcy5pbml0aWFsRGFzaGJvYXJkID0gY2xvbmVEZWVwKHRoaXMuZGFzaGJvYXJkKQ0KICAgICAgICB9LA0KICAgICAgICBkYXNoYm9hcmRTYXZlZCAoKSB7DQogICAgICAgICAgICByZXR1cm4gaXNFcXVhbCh0aGlzLmRhc2hib2FyZCwgdGhpcy5pbml0aWFsRGFzaGJvYXJkKQ0KICAgICAgICB9LA0KDQogICAgICAgIGFzeW5jIHVubG9hZCAoZXZlbnQpIHsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgcGFnZScpDQogICAgICAgICAgICBpZiAoIXRoaXMuZGFzaGJvYXJkTG9hZGVkKSByZXR1cm4NCiAgICAgICAgICAgIC8vIFByZXZlbnQgcGFnZSB1bmxvYWRpbmcgaWYgZGFzaGJvYXJkIGlzIG5vdCBzYXZlZA0KICAgICAgICAgICAgaWYgKCF0aGlzLmRhc2hib2FyZFNhdmVkKCkpIHsNCiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpDQogICAgICAgICAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSAnJyAvLyBSZXF1aXJlZCBmb3Igb2xkZXIgYnJvd3NlcnMNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYXN5bmMgaW5pdGlhbGl6ZVJMTW9kZWwgKCkgew0KICAgICAgICAgICAgLy8gV2FpdCAyIHNlY29uZHMgYmVmb3JlIHZpc3VhbGlzYXRpb25zIGFyZSBsb2FkZWQNCiAgICAgICAgICAgIGNvbnN0IHNsZWVwID0gKGRlbGF5KSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpDQogICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YXNldHM6JykNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKGF3YWl0IHRoaXMuZ2V0SW5kaWNhdG9yRGF0YVNldHMoKSgpKQ0KICAgICAgICAgICAgYXdhaXQgc2xlZXAoMjAwMCkNCiAgICAgICAgICAgIC8vIEJ1aWxkIG5ldyBSTCBNb2RlbCBhbmQgc2V0IGludGVydmFsIGZvciBmZXRjaGluZyBzdWdnZXN0aW9ucw0KICAgICAgICAgICAgY29uc3QgZGFzaGJvYXJkID0gYXdhaXQgdGhpcy5jb2xsZWN0RGFzaGJvYXJkSW5mbygpDQogICAgICAgICAgICBjb25zb2xlLmxvZyhkYXNoYm9hcmQpDQogICAgICAgICAgICBpZiAoIXRoaXMudGVzdGluZykgew0KICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYnVpbGREYXNoYm9hcmRSTE1vZGVsKHsgZGF0YTogeyBkYXNoYm9hcmQ6IGRhc2hib2FyZCB9IH0pDQogICAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIGNvbGxlY3REYXNoYm9hcmRJbmZvICgpIHsNCiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgbGlzdCB3aXRoIGluZm8gZm9yIGFsbCB2aXN1YWxpc2F0aW9ucw0KICAgICAgICAgICAgdmFyIHZpc3VhbGlzYXRpb25JbmZvTGlzdCA9IFtdDQoNCiAgICAgICAgICAgIC8vIFNlbGVjdCBjdXJyZW50IG92ZXJ2aWV3DQogICAgICAgICAgICBjb25zdCBvdmVydmlld0lkID0gdGhpcy5zZWxlY3Rpb25Db25maWc/Lm92ZXJ2aWV3SWQNCiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25Db25maWdDdXJyZW50ID0geyBvdmVydmlld0lkOiBvdmVydmlld0lkIH0NCg0KICAgICAgICAgICAgLy8gR2V0IGFsbCBjb250YWluZXJzIHdpdGggcG9zc2libGUgdmlzdWFsaXNhdGlvbnMsIGlmIG5vIGNvbnRhaW5lcnMsIHJldHVybg0KICAgICAgICAgICAgY29uc3QgY29udGFpbmVycyA9IGF3YWl0IHRoaXMuZ2V0Q29udGFpbmVycygpKHNlbGVjdGlvbkNvbmZpZ0N1cnJlbnQpDQogICAgICAgICAgICBpZiAoIWNvbnRhaW5lcnMpIHJldHVybiB2aXN1YWxpc2F0aW9uSW5mb0xpc3QNCg0KICAgICAgICAgICAgLy8gRGFzaGJvYXJkIHNpemUNCiAgICAgICAgICAgIGNvbnN0IGRhc2hib2FyZFdpZHRoID0gdGhpcy4kcmVmcy5kYXNoYm9hcmQuY2xpZW50V2lkdGgNCiAgICAgICAgICAgIGNvbnN0IGRhc2hib2FyZEhlaWdodCA9IHRoaXMuJHJlZnMuZGFzaGJvYXJkLmNsaWVudEhlaWdodA0KICAgICAgICAgICAgY29uc3QgZGFzaGJvYXJkRGlzcGxheUFyZWEgPSBkYXNoYm9hcmRXaWR0aCAqIGRhc2hib2FyZEhlaWdodA0KDQogICAgICAgICAgICAvLyBHZXQgdmlzdWFsaXNhdGlvbiBkYXRhc2V0cw0KICAgICAgICAgICAgdmFyIHZpc3VhbGlzYXRpb25EYXRhc2V0cyA9IGF3YWl0IHRoaXMuZ2V0VmlzdWFsaXNhdGlvbkRhdGFzZXRzKCkoKQ0KICAgICAgICAgICAgLy8gQ29sbGVjdCB2aXN1YWxpc2F0aW9ucyBmb3IgZWFjaCBjb250YWluZXINCiAgICAgICAgICAgIGZvciAobGV0IGNvbnRhaW5lcklkID0gMDsgY29udGFpbmVySWQgPCBjb250YWluZXJzLmxlbmd0aDsgY29udGFpbmVySWQrKykgew0KICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclBvc2l0aW9uID0gY29udGFpbmVyc1tjb250YWluZXJJZF0uUG9zaXRpb24NCiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJXaWR0aCA9IChjb250YWluZXJQb3NpdGlvblsnWCBFbmQnXSAtIGNvbnRhaW5lclBvc2l0aW9uWydYIFN0YXJ0J10pICogZGFzaGJvYXJkV2lkdGggLyAxMDANCiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSAoY29udGFpbmVyUG9zaXRpb25bJ1kgRW5kJ10gLSBjb250YWluZXJQb3NpdGlvblsnWSBTdGFydCddKSAqIGRhc2hib2FyZEhlaWdodCAvIDEwMA0KDQogICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNlbGVjdGlvbiB0byBjdXJyZW50IGNvbmFpbmVyDQogICAgICAgICAgICAgICAgc2VsZWN0aW9uQ29uZmlnQ3VycmVudC5jb250YWluZXJJZCA9IGNvbnRhaW5lcklkDQogICAgICAgICAgICAgICAgLy8gR2V0IGFsbCB2aXN1YWxpc2F0aW9uIGZvciB0aGlzIGNvbnRhaW5lcg0KICAgICAgICAgICAgICAgIGNvbnN0IHZpc3VhbGlzYXRpb25zID0gYXdhaXQgdGhpcy5nZXRWaXN1YWxpc2F0aW9ucygpKHNlbGVjdGlvbkNvbmZpZ0N1cnJlbnQpDQogICAgICAgICAgICAgICAgLy8gR2V0IGluZm8gZm9yIGVhY2ggdmlzdWFsaXNhdGlvbg0KICAgICAgICAgICAgICAgIGZvciAobGV0IHZpc3VhbGlzYXRpb25JZCA9IDA7IHZpc3VhbGlzYXRpb25JZCA8IHZpc3VhbGlzYXRpb25zLmxlbmd0aDsgdmlzdWFsaXNhdGlvbklkKyspIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzdWFsaXNhdGlvblBvc2l0aW9uID0gdmlzdWFsaXNhdGlvbnNbdmlzdWFsaXNhdGlvbklkXS5Qb3NpdGlvbg0KICAgICAgICAgICAgICAgICAgICBjb25zdCB4U3RhcnRQaXhlbHMgPSBkYXNoYm9hcmRXaWR0aCAqIGNvbnRhaW5lclBvc2l0aW9uWydYIFN0YXJ0J10gKyBjb250YWluZXJXaWR0aCAqIHZpc3VhbGlzYXRpb25Qb3NpdGlvblsnWCBTdGFydCddDQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHhFbmRQaXhlbHMgPSBkYXNoYm9hcmRXaWR0aCAqIGNvbnRhaW5lclBvc2l0aW9uWydYIEVuZCddICsgY29udGFpbmVyV2lkdGggKiB2aXN1YWxpc2F0aW9uUG9zaXRpb25bJ1ggRW5kJ10NCiAgICAgICAgICAgICAgICAgICAgY29uc3QgeVN0YXJ0UGl4ZWxzID0gZGFzaGJvYXJkSGVpZ2h0ICogY29udGFpbmVyUG9zaXRpb25bJ1kgU3RhcnQnXSArIGNvbnRhaW5lckhlaWdodCAqIHZpc3VhbGlzYXRpb25Qb3NpdGlvblsnWSBTdGFydCddDQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHlFbmRQaXhlbHMgPSBkYXNoYm9hcmRIZWlnaHQgKiBjb250YWluZXJQb3NpdGlvblsnWSBFbmQnXSArIGNvbnRhaW5lckhlaWdodCAqIHZpc3VhbGlzYXRpb25Qb3NpdGlvblsnWSBFbmQnXQ0KICAgICAgICAgICAgICAgICAgICBjb25zdCB2aXN1YWxpc2F0aW9uRGlzcGxheUFyZWEgPSAoeEVuZFBpeGVscyAtIHhTdGFydFBpeGVscykgKiAoeUVuZFBpeGVscyAtIHlTdGFydFBpeGVscykNCg0KICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc2VsZWN0aW9uIHRvIGN1cnJlbnQgdmlzdWFsaXNhdGlvbg0KICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25Db25maWdDdXJyZW50LnZpc3VhbGlzYXRpb25JZCA9IHZpc3VhbGlzYXRpb25JZA0KDQogICAgICAgICAgICAgICAgICAgIC8vIEdldCBkYXRhc2V0IGZvciB0aGlzIHZpc3VhbGlzYXRpb24NCiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc3VhbGlzYXRpb25EYXRhID0gbnVsbA0KDQogICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmlzdWFsaXNhdGlvbkRhdGFzZXQgb2YgdmlzdWFsaXNhdGlvbkRhdGFzZXRzKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB2aXN1YWxpc2F0aW9uRGF0YXNldC5jb25maWcNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXQgPSB2aXN1YWxpc2F0aW9uRGF0YXNldC5kYXRhc2V0DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNFcXVhbChjb25maWcsIHNlbGVjdGlvbkNvbmZpZ0N1cnJlbnQpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXNhdGlvbkRhdGEgPSBkYXRhc2V0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgICAgIC8vIEdldCB2aXN1YWxpc2F0aW9uIHR5cGUNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzdWFsaXNhdGlvblR5cGUgPSBhd2FpdCB0aGlzLmdldFZpc3VhbGlzYXRpb25UeXBlKCkoc2VsZWN0aW9uQ29uZmlnQ3VycmVudCkNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzdWFsaXNhdGlvblRpdGxlID0gYXdhaXQgdGhpcy5nZXRWaXN1YWxpc2F0aW9uVGl0bGUoKShzZWxlY3Rpb25Db25maWdDdXJyZW50KQ0KICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXRlZ29yeUxpbWl0ID0gYXdhaXQgdGhpcy5nZXRDYXRlZ29yeUxpbWl0KCkoc2VsZWN0aW9uQ29uZmlnQ3VycmVudCkNCg0KICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXRlZ29yeUZpZWxkID0gT2JqZWN0LmtleXModmlzdWFsaXNhdGlvbkRhdGE/Lm1hcHBpbmcpLmZpbmQoZmllbGRLZXkgPT4gZmllbGRLZXkgPT09ICdDYXRlZ29yeSBGaWVsZCcpDQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbENhdGVnb3JpZXMgPSBjYXRlZ29yeUZpZWxkID8gdmlzdWFsaXNhdGlvbkRhdGE/LmRhdGE/Lm1hcChyb3cgPT4gcm93W2NhdGVnb3J5RmllbGRdKSA6IFtdDQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RpbmN0Q2F0ZWdvcmllcyA9IG5ldyBTZXQoYWxsQ2F0ZWdvcmllcykNCg0KICAgICAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZkNhdGVnb3JpZXMgPSBkaXN0aW5jdENhdGVnb3JpZXM/LnNpemUNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZEYXRhUG9pbnRzID0gdmlzdWFsaXNhdGlvbkRhdGE/LmRhdGE/Lmxlbmd0aCA/PyAwDQogICAgICAgICAgICAgICAgICAgIGNvbnN0IGFtb3VudE9mVmFsdWVGaWVsZHMgPSBPYmplY3Qua2V5cyh2aXN1YWxpc2F0aW9uRGF0YT8ubWFwcGluZykuZmlsdGVyKGZpZWxkS2V5ID0+IGZpZWxkS2V5LmluY2x1ZGVzKCdWYWx1ZSBGaWVsZCcpKS5sZW5ndGgNCg0KICAgICAgICAgICAgICAgICAgICAvLyBHYXRoZXIgYWxsIHZpc3VhbGlzYXRpb24gaW5mb3JtYXRpb24gaW50byBvbmUgb2JqZWN0DQogICAgICAgICAgICAgICAgICAgIHZhciB2aXN1YWxpc2F0aW9uSW5mbyA9IHt9DQogICAgICAgICAgICAgICAgICAgIHZpc3VhbGlzYXRpb25JbmZvWydTZWxlY3Rpb24gQ29uZmlndXJhdGlvbiddID0gY2xvbmVEZWVwKHNlbGVjdGlvbkNvbmZpZ0N1cnJlbnQpIC8vIEZvciBhcHBseWluZyB0aGlzIHRvIHRoZSBjb3JyZWN0IHZpc3VhbGlzYXRpb24NCiAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXNhdGlvbkluZm9bJ1Zpc3VhbGlzYXRpb24gVHlwZSddID0gdmlzdWFsaXNhdGlvblR5cGUNCiAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXNhdGlvbkluZm9bJ1Zpc3VhbGlzYXRpb24gVGl0bGUnXSA9IHZpc3VhbGlzYXRpb25UaXRsZQ0KICAgICAgICAgICAgICAgICAgICB2aXN1YWxpc2F0aW9uSW5mb1snQ2F0ZWdvcnkgSXRlbXMnXSA9IG51bWJlck9mQ2F0ZWdvcmllcw0KICAgICAgICAgICAgICAgICAgICB2aXN1YWxpc2F0aW9uSW5mb1snRGF0YSBJdGVtcyddID0gbnVtYmVyT2ZEYXRhUG9pbnRzICogYW1vdW50T2ZWYWx1ZUZpZWxkcw0KICAgICAgICAgICAgICAgICAgICB2aXN1YWxpc2F0aW9uSW5mb1snSXRlbSBMaW1pdCBFbmFibGVkJ10gPSBjYXRlZ29yeUxpbWl0ID4gMA0KICAgICAgICAgICAgICAgICAgICB2aXN1YWxpc2F0aW9uSW5mb1snSXRlbSBMaW1pdCddID0gY2F0ZWdvcnlMaW1pdCA/PyAwDQogICAgICAgICAgICAgICAgICAgIHZpc3VhbGlzYXRpb25JbmZvWydEaXNwbGF5IEFyZWEnXSA9IHZpc3VhbGlzYXRpb25EaXNwbGF5QXJlYQ0KICAgICAgICAgICAgICAgICAgICB2aXN1YWxpc2F0aW9uSW5mby5Qb3NpdGlvbiA9IHsgJ1ggU3RhcnQnOiB4U3RhcnRQaXhlbHMsICdYIEVuZCc6IHhFbmRQaXhlbHMsICdZIFN0YXJ0JzogeVN0YXJ0UGl4ZWxzLCAnWSBFbmQnOiB5RW5kUGl4ZWxzIH0NCiAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXNhdGlvbkluZm9MaXN0LnB1c2godmlzdWFsaXNhdGlvbkluZm8pDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuIHsgVmlzdWFsaXNhdGlvbnM6IHZpc3VhbGlzYXRpb25JbmZvTGlzdCwgJ0Rpc3BsYXkgQXJlYSc6IGRhc2hib2FyZERpc3BsYXlBcmVhIH0NCiAgICAgICAgfSwNCiAgICAgICAgYXN5bmMgdXBkYXRlUkxNb2RlbCAoKSB7DQogICAgICAgICAgICBpZiAodGhpcy50ZXN0aW5nKSByZXR1cm4NCiAgICAgICAgICAgIC8vIFdhaXQgMiBzZWNvbmRzIGJlZm9yZSB2aXN1YWxpc2F0aW9ucyBhcmUgbG9hZGVkDQogICAgICAgICAgICBjb25zdCBzbGVlcCA9IChkZWxheSkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKQ0KICAgICAgICAgICAgYXdhaXQgc2xlZXAoMjAwMCkNCiAgICAgICAgICAgIC8vIFVwZGF0ZSBSTCBNb2RlbCBhbmQgc2V0IGludGVydmFsIGZvciBmZXRjaGluZyBzdWdnZXN0aW9ucw0KICAgICAgICAgICAgY29uc3QgZGFzaGJvYXJkID0gYXdhaXQgdGhpcy5jb2xsZWN0RGFzaGJvYXJkSW5mbygpDQogICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZURhc2hib2FyZFJMTW9kZWwoeyBkYXRhOiB7IGRhc2hib2FyZDogZGFzaGJvYXJkIH0gfSkNCiAgICAgICAgICAgIC8vIFJlc2V0IHRpbWVyIGZvciBmZXRjaGluZyBzdWdnZXN0aW9ucw0KICAgICAgICAgICAgaWYgKCF0aGlzLnRlc3RpbmcpIHsNCiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZmV0Y2hTdWdnZXN0aW9uc1RpbWVyKQ0KICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hTdWdnZXN0aW9uc1RpbWVyID0gc2V0SW50ZXJ2YWwodGhpcy5mZXRjaERhc2hib2FyZFN1Z2dlc3Rpb25zLCAxMDAwMCkNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgYXN5bmMgc3RvcFJMTW9kZWwgKCkgew0KICAgICAgICAgICAgLy8gRGVsZXRlIFJMIG1vZGVsIGFuZCBjbGVhciB0aW1lcg0KICAgICAgICAgICAgYXdhaXQgdGhpcy5kZWxldGVEYXNoYm9hcmRSTE1vZGVsKHsgZGF0YToge30gfSkNCiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5mZXRjaFN1Z2dlc3Rpb25zVGltZXIpDQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIHNhdmVDaGFuZ2VzICgpIHsNCiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhc2hib2FyZFRvRGF0YWJhc2UoKQ0KICAgICAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpDQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIGRpc2NhcmRDaGFuZ2VzICgpIHsNCiAgICAgICAgICAgIGNvbnN0IG9sZERhc2hib2FyZCA9IGNsb25lRGVlcCh0aGlzLmluaXRpYWxEYXNoYm9hcmQpDQogICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWREYXNoYm9hcmRNb2RlbChvbGREYXNoYm9hcmQpDQogICAgICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCkNCiAgICAgICAgfSwNCiAgICAgICAgY2xvc2VEaWFsb2cgKCkgew0KICAgICAgICAgICAgdGhpcy5zaG93RGlhbG9nID0gZmFsc2UNCiAgICAgICAgfSwNCg0KICAgICAgICBhc3luYyBsb2FkRGFzaGJvYXJkRnJvbURhdGFiYXNlICgpIHsNCiAgICAgICAgICAgIC8vIExvYWQgZGFzaGJvYXJkIGZyb20gZGF0YWJhc2UNCiAgICAgICAgICAgIGNvbnN0IGRhc2hib2FyZCA9IGF3YWl0IHRoaXMuZ2V0RGFzaGJvYXJkKCkNCiAgICAgICAgICAgIC8vIFNldCBhcyBjdXJyZW50IGRhc2hib2FyZA0KICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXREYXNoYm9hcmQoZGFzaGJvYXJkKQ0KDQogICAgICAgICAgICAvLyBHZXQgZGFzaGJvYXJkIG1vZGVsIHNwZWNpZmljYXRpb24NCiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gZGFzaGJvYXJkLnNwZWNpZmljYXRpb24NCiAgICAgICAgICAgIC8vIExvYWQgZGFzaGJvYXJkIG1vZGVsDQogICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWREYXNoYm9hcmRNb2RlbChtb2RlbCkNCiAgICAgICAgICAgIC8vIExvYWQgZGFzaGJvYXJkIGRhdGENCiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZERhc2hib2FyZERhdGEoKQ0KICAgICAgICAgICAgLy8gV2hlbiBldmVyeXRoaW5nIGlzIHJlYWR5IHNob3cgZGFzaGJvYXJkDQogICAgICAgICAgICB0aGlzLmRhc2hib2FyZExvYWRlZCA9IHRydWUNCiAgICAgICAgfSwNCiAgICAgICAgYXN5bmMgc2F2ZURhc2hib2FyZFRvRGF0YWJhc2UgKCkgew0KICAgICAgICAgICAgaWYgKCF0aGlzLnBlcm1pc3Npb24pIHsNCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTm8gcGVybWlzc2lvbiB0byBzYXZlIGRhc2hib2FyZHMhJykNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1Blcm1pc3Npb24gdG8gc2F2ZSBkYXNoYm9hcmQhJykNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IGRhc2hib2FyZCBtb2RlbA0KICAgICAgICAgICAgY29uc3QgZGFzaGJvYXJkTW9kZWwgPSBhd2FpdCB0aGlzLmdldERhc2hib2FyZE1vZGVsKCkoKQ0KICAgICAgICAgICAgLy8gQ29tYmluZSBkYXNoYm9hcmQgaWQgd2l0aCBkYXNoYm9hcmQgbW9kZWwgc3BlY2lmaWNhdGlvbg0KICAgICAgICAgICAgY29uc3QgZGFzaGJvYXJkSWQgPSBwYXJzZUludCh0aGlzLmRhc2hib2FyZElkKQ0KICAgICAgICAgICAgY29uc3QgZGF0YSA9IHsgaWQ6IGRhc2hib2FyZElkLCBkYXRhOiBkYXNoYm9hcmRNb2RlbCB9DQogICAgICAgICAgICAvLyBTZW5kIHRoaXMgZGF0YSB0byB1cGRhdGUgdGhlIGRhc2hib2FyZCBpbiB0aGUgZGF0YWJhc2UNCiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlRGFzaGJvYXJkKGRhdGEpDQogICAgICAgICAgICAvLyBTaWduYWwgdGhhdCBjaGFuZ2VzIGFyZSBzYXZlZA0KICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRJbml0aWFsRGFzaGJvYXJkKCkNCiAgICAgICAgfSwNCiAgICAgICAgYXN5bmMgbG9hZERhc2hib2FyZE1vZGVsIChtb2RlbCkgew0KICAgICAgICAgICAgLy8gRm9yY2UgcmVsb2FkIGJ5IGZpcnN0IHNldHRpbmcgbW9kZWwgdG8gbnVsbA0KICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVEYXNoYm9hcmRNb2RlbChudWxsKQ0KICAgICAgICAgICAgLy8gVGhlbiBzZXQgZGFzaGJvYXJkIG1vZGVsDQogICAgICAgICAgICBjb25zdCBwYXlsb2FkID0geyB2YWx1ZTogbW9kZWwgfQ0KICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVEYXNoYm9hcmRNb2RlbChwYXlsb2FkKQ0KICAgICAgICB9LA0KICAgICAgICBhc3luYyBsb2FkRGFzaGJvYXJkRGF0YSAoKSB7DQogICAgICAgICAgICAvLyBSZXRyaWV2ZSBhbmQgc2F2ZSBhbGwgaW5kaWNhdG9ycyBvZiB0aGUgZ2l2ZW4gbWV0aG9kcw0KICAgICAgICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IGF3YWl0IHRoaXMucmV0cmlldmVJbmRpY2F0b3JzKCkNCiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0SW5kaWNhdG9ycyhpbmRpY2F0b3JzKQ0KDQogICAgICAgICAgICAvLyBSZXRyaWV2ZSBhbmQgc2F2ZSBhbGwgZGF0YSBmb3IgdGhlIGluZGljYXRvcnMgb2YgdGhlIGdpdmVuIG1ldGhvZHMNCiAgICAgICAgICAgIGNvbnN0IGluZGljYXRvckRhdGEgPSBhd2FpdCB0aGlzLnJldHJpZXZlSW5kaWNhdG9yRGF0YSgpDQogICAgICAgICAgICBhd2FpdCB0aGlzLnNldEluZGljYXRvckRhdGEoaW5kaWNhdG9yRGF0YSkNCg0KICAgICAgICAgICAgLy8gQ3JlYXRlIGRhdGEgc2V0cyBmb3IgZWFjaCBpbmRpY2F0b3INCiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlSW5kaWNhdG9yRGF0YVNldHMoKQ0KICAgICAgICB9LA0KICAgICAgICBhc3luYyByZXRyaWV2ZUluZGljYXRvcnMgKCkgew0KICAgICAgICAgICAgY29uc3QgbWV0aG9kSWRzID0gYXdhaXQgdGhpcy5nZXRNZXRob2RzKCkoKQ0KICAgICAgICAgICAgdmFyIGluZGljYXRvcnMgPSBbXQ0KICAgICAgICAgICAgZm9yICh2YXIgbWV0aG9kSWQgb2YgbWV0aG9kSWRzKSB7DQogICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0SW5kaWNhdG9ycyA9IGF3YWl0IERpcmVjdEluZGljYXRvclNlcnZpY2UuZ2V0KHsgbUlkOiBtZXRob2RJZCB9KQ0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRpcmVjdEluZGljYXRvcnMpDQogICAgICAgICAgICAgICAgaWYgKCFkaXJlY3RJbmRpY2F0b3JzPy5lcnJvciB8fCBkaXJlY3RJbmRpY2F0b3JzPy5lcnJvcj8ucmVzcG9uc2U/LnN0YXR1cyA9PT0gNDA0KSB7DQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRpcmVjdEluZGljYXRvciBvZiAoZGlyZWN0SW5kaWNhdG9ycz8ucmVzcG9uc2U/LmRhdGEgfHwgW10pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLnB1c2goZGlyZWN0SW5kaWNhdG9yKQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGNvbnN0IGluZGlyZWN0SW5kaWNhdG9ycyA9IGF3YWl0IEluZGlyZWN0SW5kaWNhdG9yU2VydmljZS5nZXQoeyBtSWQ6IG1ldGhvZElkIH0pDQogICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW5kaXJlY3RJbmRpY2F0b3JzKQ0KICAgICAgICAgICAgICAgIGlmICghaW5kaXJlY3RJbmRpY2F0b3JzPy5lcnJvciB8fCBpbmRpcmVjdEluZGljYXRvcnM/LmVycm9yPy5yZXNwb25zZT8uc3RhdHVzID09PSA0MDQpIHsNCiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kaXJlY3RJbmRpY2F0b3Igb2YgKGluZGlyZWN0SW5kaWNhdG9ycz8ucmVzcG9uc2U/LmRhdGEgfHwgW10pKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2F0b3JzLnB1c2goaW5kaXJlY3RJbmRpY2F0b3IpDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmRpY2F0b3JzKQ0KICAgICAgICAgICAgaW5kaWNhdG9ycyA9IGluZGljYXRvcnM/Lm1hcChlbCA9PiAoeyBuYW1lOiBlbC5uYW1lLCBrZXk6IGVsLmtleSB9KSkNCiAgICAgICAgICAgIHJldHVybiBpbmRpY2F0b3JzDQogICAgICAgIH0sDQogICAgICAgIGFzeW5jIHJldHJpZXZlSW5kaWNhdG9yRGF0YSAoKSB7DQogICAgICAgICAgICAvLyBEZXRlcm1pbmUgY3VycmVudCBvcmdhbmlzYXRpb24gYW5kIHRhcmdldGVkIG1ldGhvZHMgZm9yIGRhc2hib2FyZA0KICAgICAgICAgICAgY29uc3QgbWV0aG9kSWRzID0gYXdhaXQgdGhpcy5nZXRNZXRob2RzKCkoKQ0KICAgICAgICAgICAgY29uc3Qgb3JnYW5pc2F0aW9uSWQgPSB0aGlzLm9yZ2FuaXNhdGlvbklkDQoNCiAgICAgICAgICAgIC8qIEdldCB0aGUgZGF0YSBmcm9tIHRoZSBlc2VhIGFjY291bnRzIG9mIHRoZSBjdXJyZW50IG9yZ2FuaXNhdGlvbiAoYnkgbG9va2luZyBhdCB0aGUgcXVlc3Rpb24gcmVzcG9uc2VzIGluIHRoZSBzdXJ2ZXkgcmVzcG9uc2VzKSAqLw0KICAgICAgICAgICAgdmFyIGVzZWFEYXRhID0gW10NCg0KICAgICAgICAgICAgLy8gR2V0IGVzZWEgYWNjb3VudHMgZm9yIHRoaXMgb3JnYW5pc2F0aW9uDQogICAgICAgICAgICBjb25zdCBlc2VhQWNjb3VudHNSZXF1ZXN0ID0gYXdhaXQgRXNlYUFjY291bnRTZXJ2aWNlLmdldCh7IG9JZDogb3JnYW5pc2F0aW9uSWQgfSkNCiAgICAgICAgICAgIGlmIChlc2VhQWNjb3VudHNSZXF1ZXN0LmVycm9yKSByZXR1cm4NCiAgICAgICAgICAgIGNvbnN0IGVzZWFBY2NvdW50cyA9IGVzZWFBY2NvdW50c1JlcXVlc3QucmVzcG9uc2UuZGF0YQ0KDQogICAgICAgICAgICAvLyBMb29wIG92ZXIgZXNlYSBhY2NvdW50cw0KICAgICAgICAgICAgZm9yICh2YXIgZXNlYUFjY291bnQgb2YgZXNlYUFjY291bnRzKSB7DQogICAgICAgICAgICAgICAgY29uc3QgZXNlYUFjY291bnRJZCA9IGVzZWFBY2NvdW50LmlkDQogICAgICAgICAgICAgICAgLy8gR2V0IHllYXIgYW5kIG1ldGhvZCBvZiB0aGlzIGVzZWEgYWNjb3VudA0KICAgICAgICAgICAgICAgIGNvbnN0IGVzZWFBY2NvdW50WWVhciA9IGVzZWFBY2NvdW50LnllYXINCiAgICAgICAgICAgICAgICBjb25zdCBlc2VhTWV0aG9kID0gZXNlYUFjY291bnQubWV0aG9kDQoNCiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGVzZWEgYWNjb3VudCBpcyBub3QgZm9yIGEgdGFyZ2V0ZWQgbWV0aG9kLCBza2lwIHRoaXMgZXNlYSBhY2NvdW50DQogICAgICAgICAgICAgICAgaWYgKCFtZXRob2RJZHMuaW5jbHVkZXMoZXNlYU1ldGhvZCkpIGNvbnRpbnVlDQoNCiAgICAgICAgICAgICAgICAvLyBHZXQgYWxsIHN1cnZleSByZXNwb25zZXMgZm9yIHRoaXMgZXNlYSBhY2NvdW50DQogICAgICAgICAgICAgICAgY29uc3Qgc3VydmV5UmVzcG9uc2VSZXF1ZXN0ID0gYXdhaXQgU3VydmV5UmVzcG9uc2VTZXJ2aWNlLmdldCh7IG9JZDogb3JnYW5pc2F0aW9uSWQsIGVhSWQ6IGVzZWFBY2NvdW50SWQgfSkNCiAgICAgICAgICAgICAgICBpZiAoc3VydmV5UmVzcG9uc2VSZXF1ZXN0LmVycm9yKSBjb250aW51ZQ0KICAgICAgICAgICAgICAgIGNvbnN0IHN1cnZleVJlc3BvbnNlcyA9IHN1cnZleVJlc3BvbnNlUmVxdWVzdC5yZXNwb25zZS5kYXRhDQoNCiAgICAgICAgICAgICAgICAvLyBMb29wIG92ZXIgc3VydmV5IHJlc3BvbnNlcw0KICAgICAgICAgICAgICAgIGZvciAodmFyIHN1cnZleVJlc3BvbnNlIG9mIHN1cnZleVJlc3BvbnNlcykgew0KICAgICAgICAgICAgICAgICAgICAvLyBHZXQgcmVzcG9uc2VzIHRvIHF1ZXN0aW9ucw0KICAgICAgICAgICAgICAgICAgICBjb25zdCBxdWVzdGlvblJlc3BvbnNlcyA9IHN1cnZleVJlc3BvbnNlLnF1ZXN0aW9uX3Jlc3BvbnNlcw0KDQogICAgICAgICAgICAgICAgICAgIC8vIExvb3Agb3ZlciBhbGwgcXVlc3Rpb25zDQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHF1ZXN0aW9uUmVzcG9uc2Ugb2YgcXVlc3Rpb25SZXNwb25zZXMpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHJpZXZlIGluZGljYXRvciBkYXRhIGFuZCB0aGUgZ2l2ZW4gdmFsdWVzDQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RJbmRpY2F0b3JLZXkgPSBxdWVzdGlvblJlc3BvbnNlLmRpcmVjdF9pbmRpY2F0b3Jfa2V5DQogICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RJbmRpY2F0b3JWYWx1ZSA9IHF1ZXN0aW9uUmVzcG9uc2UudmFsdWUgPz8gcXVlc3Rpb25SZXNwb25zZS52YWx1ZXMNCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG11bHRpcGxlQ2hvaWNlID0gcXVlc3Rpb25SZXNwb25zZS52YWx1ZSA9PT0gbnVsbA0KDQogICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBpbmRpY2F0b3IgZGF0YQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXNlYURhdGEucHVzaCh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0luZGljYXRvciBLZXknOiBkaXJlY3RJbmRpY2F0b3JLZXksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWU6IGRpcmVjdEluZGljYXRvclZhbHVlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFllYXI6IGVzZWFBY2NvdW50WWVhciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTXVsdGlwbGUgQ2hvaWNlJzogbXVsdGlwbGVDaG9pY2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAnRXNlYSBBY2NvdW50IElkJzogZXNlYUFjY291bnRJZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAnTWV0aG9kIElkJzogZXNlYU1ldGhvZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAnSW5kaWNhdG9yIElkJzogZGlyZWN0SW5kaWNhdG9ySWQNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vIFJldHVybiB0aGUgZGF0YSBmb3IgYWxsIGluZGljYXRvcnMNCiAgICAgICAgICAgIHJldHVybiBlc2VhRGF0YQ0KICAgICAgICB9DQogICAgfQ0KfQ0K"},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\views\\organisation\\OrganisationDashboard.vue"],"names":[],"mappings":";AA2CA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAE1C,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEpE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACphrD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEnC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACf,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACvE;QACJ,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YAC1B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;;YAE7B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;;YAEtpE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAE5C,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAChB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAE5D,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClgBACtE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBACxG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;;gBAE1G,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/C,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5E,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBACtF,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACroBACrH,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;ooBACvH,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;oBACjH,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;oBAEzF,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;oBAEvD,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;oBAE3B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;wBACtD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACzC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC3C,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;4BACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC1B,CAAC,CAAC,CAAC,CAAC;wBACR;oBACJ;;oBAEA,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClF,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpF,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;ooBAC5G,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;oBACjG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;oBAEhD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;ooBAE9H,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;oBACzoBACjI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;oBAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;oBACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC1H,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChD;YACJ;YACA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACzF,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YACnB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5E,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACpE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClF;QACJ,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YACjB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;YAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YACjB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CA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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/C;YACA,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACrD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnC,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAC7B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;YAC/B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YACvB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAEnC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAEzC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YACxB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YAClB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC5B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC3E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;oBAC/E,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;wBAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnC;gBACJ;gBACA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC/E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;oBACnF,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;wBACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrC;gBACJ;YACJ;YACA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC;QACD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;YAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAEznI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;;YAEhB,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAChF,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;YAErD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAClC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;gBAEpC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3E,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;gBAE5C,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC1G,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;gBAE1D,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5B,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBACxC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;oBAE1D,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACzB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;wBAC5C,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC9C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC/D,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7E,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;wBAErD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACnC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC3B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACnC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC1B,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACvC,CAAC;oBACL;gBACJ;YACJ;;YAEA,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClB;IACJ;AACJ","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/views/organisation/OrganisationDashboard.vue","sourceRoot":"","sourcesContent":["<template>\r\n\r\n    <!-- Dashboard -->\r\n    <div class=\"organisation-dashboard\" ref=\"dashboard\">\r\n\r\n        <!-- Show spinner while loading dashboard -->\r\n        <div v-if=\"!dashboardLoaded\" class=\"spinner-div\">\r\n            <ProgressSpinner class=\"center-spinner\"></ProgressSpinner>\r\n        </div>\r\n\r\n        <!-- If dashboard is loaded, show dashboard and editing section -->\r\n        <div v-else>\r\n            <!-- Editing Section -->\r\n            <DashboardEditingSection @saveButtonClicked=\"saveDashboardToDatabase\" @discardButtonClicked=\"discardChanges\"></DashboardEditingSection>\r\n            <!-- Actual dashboard -->\r\n            <Dashboard></Dashboard>\r\n\r\n            <!-- Dialog showing that there are unsaved changes -->\r\n            <Dialog ref=\"dialog\" v-model:visible=\"showDialog\" modal\r\n                :header=\"'There are unsaved changes to the dashboard. Do you want to save these changes?'\">\r\n\r\n                <!-- Footer with buttons for options: Cancel, Discard Changes, Save Changes -->\r\n                <template #footer>\r\n                    <Button label=\"Cancel\" icon=\"pi pi-times\"\r\n                        @click=\"closeDialog\" text>\r\n                    </Button>\r\n                    <Button label=\"Discard Changes\" icon=\"pi pi-trash\" class=\"p-button-danger p-button-sm\"\r\n                        @click=\"discardChanges\" text>\r\n                    </Button>\r\n                    <Button label=\"Save Changes\" icon=\"pi pi-check\" class=\"p-button-success p-button-sm\"\r\n                        @click=\"saveChanges\" autofocus>\r\n                    </Button>\r\n                </template>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport { isEqual, cloneDeep } from 'lodash'\r\n\r\nimport { mapState, mapGetters, mapMutations, mapActions } from 'vuex'\r\n\r\nimport EseaAccountService from '../../services/EseaAccountService.js'\r\nimport SurveyResponseService from '../../services/SurveyResponseService.js'\r\nimport DirectIndicatorService from '../../services/DirectIndicatorService.js'\r\nimport IndirectIndicatorService from '../../services/IndirectIndicatorService.js'\r\n\r\nimport Dashboard from '../../components/dashboard/Dashboard.vue'\r\nimport DashboardEditingSection from '../../components/dashboard/DashboardEditingSection.vue'\r\n\r\nimport ProgressSpinner from 'primevue/progressspinner'\r\nimport Dialog from 'primevue/dialog'\r\n\r\nexport default {\r\n    components: {\r\n        DashboardEditingSection,\r\n        Dashboard,\r\n\r\n        ProgressSpinner,\r\n        Dialog\r\n    },\r\n    data () {\r\n        return {\r\n            // Route parameters for organisation and dashboard ids\r\n            organisationId: this.$route.params.OrganisationId,\r\n            dashboardId: this.$route.params.DashboardId,\r\n\r\n            dashboardLoaded: false,\r\n\r\n            initialDashboard: null,\r\n\r\n            showDialog: false,\r\n\r\n            fetchSuggestionsTimer: null,\r\n\r\n            testing: true\r\n        }\r\n    },\r\n    computed: {\r\n        // ...mapState('network', ['networks']),\r\n        ...mapState('organisation', ['organisation']),\r\n        ...mapState('dashboardModel', ['dashboard', 'selectionConfig']),\r\n            permission () {\r\n                if (this.organisation.accesLevel) {\r\n                    const accesLevel = this.organisation.accesLevel\r\n                    if (accesLevel === 'admin' || accesLevel === 'network admin') {\r\n                        return true\r\n                    }\r\n                }\r\n                return false\r\n            }\r\n    },\r\n    watch: {\r\n        dashboard: {\r\n            handler: 'updateRLModel',\r\n            deep: true\r\n        }\r\n    },\r\n    async mounted () {\r\n        if (!this.testing) {\r\n            this.fetchSuggestionsTimer = setInterval(this.fetchDashboardSuggestions, 10000)\r\n        }\r\n    },\r\n    async unmounted () {\r\n        if (!this.testing) {\r\n            clearInterval(this.fetchSuggestionsTimer)\r\n        }\r\n    },\r\n    async beforeUnmount () {\r\n        window.removeEventListener('beforeunload', this.unload)\r\n    },\r\n    async created () {\r\n        window.addEventListener('beforeunload', this.unload)\r\n\r\n        // Fetch latest version of dashboard\r\n        await this.fetchDashboard({ id: parseInt(this.dashboardId) })\r\n        // Load dashboard from fetched dashboard\r\n        await this.loadDashboardFromDatabase()\r\n        await this.setInitialDashboard()\r\n\r\n        // Initialize RL model\r\n        if (!this.testing) {\r\n            await this.initializeRLModel()\r\n        }\r\n    },\r\n    async beforeRouteLeave (to, from, next) {\r\n        console.log('Leaving route')\r\n        if (!this.dashboardLoaded) next(true)\r\n        if (!this.dashboardSaved()) {\r\n            this.showDialog = true\r\n            next(false)\r\n        } else {\r\n            if (!this.testing) {\r\n                await this.stopRLModel()\r\n            }\r\n            next(true)\r\n        }\r\n    },\r\n    methods: {\r\n        ...mapGetters('dashboard', ['getDashboard', 'getDashboards']),\r\n        ...mapActions('dashboard', ['setDashboard', 'updateDashboard', 'fetchDashboard']),\r\n\r\n        ...mapGetters('dashboardData', ['getIndicatorDataSets', 'getIndicatorFields', 'getIndicators', 'getVisualisationDatasets']),\r\n        ...mapMutations('dashboardData', ['setIndicators', 'setIndicatorData', 'setIndicatorFields']),\r\n        ...mapActions('dashboardData', ['createIndicatorDataSets']),\r\n\r\n        ...mapGetters('dashboardModel', ['getDashboardModel', 'getMethods', 'getOverview', 'getContainers', 'getVisualisations', 'getVisualisationTitle', 'getVisualisationType', 'getCategoryLimit']),\r\n        ...mapActions('dashboardModel', ['createDashboardModel']),\r\n\r\n        ...mapActions('dashboardSuggestions', ['buildDashboardRLModel', 'updateDashboardRLModel', 'deleteDashboardRLModel', 'fetchDashboardSuggestions']),\r\n\r\n        setInitialDashboard () {\r\n            this.initialDashboard = cloneDeep(this.dashboard)\r\n        },\r\n        dashboardSaved () {\r\n            return isEqual(this.dashboard, this.initialDashboard)\r\n        },\r\n\r\n        async unload (event) {\r\n            console.log('Unloading page')\r\n            if (!this.dashboardLoaded) return\r\n            // Prevent page unloading if dashboard is not saved\r\n            if (!this.dashboardSaved()) {\r\n                event.preventDefault()\r\n                event.returnValue = '' // Required for older browsers\r\n            }\r\n        },\r\n        async initializeRLModel () {\r\n            // Wait 2 seconds before visualisations are loaded\r\n            const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\r\n            console.log('datasets:')\r\n            console.log(await this.getIndicatorDataSets()())\r\n            await sleep(2000)\r\n            // Build new RL Model and set interval for fetching suggestions\r\n            const dashboard = await this.collectDashboardInfo()\r\n            console.log(dashboard)\r\n            if (!this.testing) {\r\n                await this.buildDashboardRLModel({ data: { dashboard: dashboard } })\r\n            }\r\n        },\r\n        async collectDashboardInfo () {\r\n            // Initialize list with info for all visualisations\r\n            var visualisationInfoList = []\r\n\r\n            // Select current overview\r\n            const overviewId = this.selectionConfig?.overviewId\r\n            var selectionConfigCurrent = { overviewId: overviewId }\r\n\r\n            // Get all containers with possible visualisations, if no containers, return\r\n            const containers = await this.getContainers()(selectionConfigCurrent)\r\n            if (!containers) return visualisationInfoList\r\n\r\n            // Dashboard size\r\n            const dashboardWidth = this.$refs.dashboard.clientWidth\r\n            const dashboardHeight = this.$refs.dashboard.clientHeight\r\n            const dashboardDisplayArea = dashboardWidth * dashboardHeight\r\n\r\n            // Get visualisation datasets\r\n            var visualisationDatasets = await this.getVisualisationDatasets()()\r\n            // Collect visualisations for each container\r\n            for (let containerId = 0; containerId < containers.length; containerId++) {\r\n                const containerPosition = containers[containerId].Position\r\n                const containerWidth = (containerPosition['X End'] - containerPosition['X Start']) * dashboardWidth / 100\r\n                const containerHeight = (containerPosition['Y End'] - containerPosition['Y Start']) * dashboardHeight / 100\r\n\r\n                // Update selection to current conainer\r\n                selectionConfigCurrent.containerId = containerId\r\n                // Get all visualisation for this container\r\n                const visualisations = await this.getVisualisations()(selectionConfigCurrent)\r\n                // Get info for each visualisation\r\n                for (let visualisationId = 0; visualisationId < visualisations.length; visualisationId++) {\r\n                    const visualisationPosition = visualisations[visualisationId].Position\r\n                    const xStartPixels = dashboardWidth * containerPosition['X Start'] + containerWidth * visualisationPosition['X Start']\r\n                    const xEndPixels = dashboardWidth * containerPosition['X End'] + containerWidth * visualisationPosition['X End']\r\n                    const yStartPixels = dashboardHeight * containerPosition['Y Start'] + containerHeight * visualisationPosition['Y Start']\r\n                    const yEndPixels = dashboardHeight * containerPosition['Y End'] + containerHeight * visualisationPosition['Y End']\r\n                    const visualisationDisplayArea = (xEndPixels - xStartPixels) * (yEndPixels - yStartPixels)\r\n\r\n                    // Update selection to current visualisation\r\n                    selectionConfigCurrent.visualisationId = visualisationId\r\n\r\n                    // Get dataset for this visualisation\r\n                    var visualisationData = null\r\n\r\n                    for (const visualisationDataset of visualisationDatasets) {\r\n                        const config = visualisationDataset.config\r\n                        const dataset = visualisationDataset.dataset\r\n                        if (isEqual(config, selectionConfigCurrent)) {\r\n                            visualisationData = dataset\r\n                            break\r\n                        }\r\n                    }\r\n\r\n                    // Get visualisation type\r\n                    const visualisationType = await this.getVisualisationType()(selectionConfigCurrent)\r\n                    const visualisationTitle = await this.getVisualisationTitle()(selectionConfigCurrent)\r\n                    const categoryLimit = await this.getCategoryLimit()(selectionConfigCurrent)\r\n\r\n                    const categoryField = Object.keys(visualisationData?.mapping).find(fieldKey => fieldKey === 'Category Field')\r\n                    const allCategories = categoryField ? visualisationData?.data?.map(row => row[categoryField]) : []\r\n                    const distinctCategories = new Set(allCategories)\r\n\r\n                    const numberOfCategories = distinctCategories?.size\r\n                    const numberOfDataPoints = visualisationData?.data?.length ?? 0\r\n                    const amountOfValueFields = Object.keys(visualisationData?.mapping).filter(fieldKey => fieldKey.includes('Value Field')).length\r\n\r\n                    // Gather all visualisation information into one object\r\n                    var visualisationInfo = {}\r\n                    visualisationInfo['Selection Configuration'] = cloneDeep(selectionConfigCurrent) // For applying this to the correct visualisation\r\n                    visualisationInfo['Visualisation Type'] = visualisationType\r\n                    visualisationInfo['Visualisation Title'] = visualisationTitle\r\n                    visualisationInfo['Category Items'] = numberOfCategories\r\n                    visualisationInfo['Data Items'] = numberOfDataPoints * amountOfValueFields\r\n                    visualisationInfo['Item Limit Enabled'] = categoryLimit > 0\r\n                    visualisationInfo['Item Limit'] = categoryLimit ?? 0\r\n                    visualisationInfo['Display Area'] = visualisationDisplayArea\r\n                    visualisationInfo.Position = { 'X Start': xStartPixels, 'X End': xEndPixels, 'Y Start': yStartPixels, 'Y End': yEndPixels }\r\n                    visualisationInfoList.push(visualisationInfo)\r\n                }\r\n            }\r\n            return { Visualisations: visualisationInfoList, 'Display Area': dashboardDisplayArea }\r\n        },\r\n        async updateRLModel () {\r\n            if (this.testing) return\r\n            // Wait 2 seconds before visualisations are loaded\r\n            const sleep = (delay) => new Promise((resolve) => setTimeout(resolve, delay))\r\n            await sleep(2000)\r\n            // Update RL Model and set interval for fetching suggestions\r\n            const dashboard = await this.collectDashboardInfo()\r\n            await this.updateDashboardRLModel({ data: { dashboard: dashboard } })\r\n            // Reset timer for fetching suggestions\r\n            if (!this.testing) {\r\n                clearInterval(this.fetchSuggestionsTimer)\r\n                this.fetchSuggestionsTimer = setInterval(this.fetchDashboardSuggestions, 10000)\r\n            }\r\n        },\r\n        async stopRLModel () {\r\n            // Delete RL model and clear timer\r\n            await this.deleteDashboardRLModel({ data: {} })\r\n            clearInterval(this.fetchSuggestionsTimer)\r\n        },\r\n        async saveChanges () {\r\n            await this.saveDashboardToDatabase()\r\n            this.closeDialog()\r\n        },\r\n        async discardChanges () {\r\n            const oldDashboard = cloneDeep(this.initialDashboard)\r\n            await this.loadDashboardModel(oldDashboard)\r\n            this.closeDialog()\r\n        },\r\n        closeDialog () {\r\n            this.showDialog = false\r\n        },\r\n\r\n        async loadDashboardFromDatabase () {\r\n            // Load dashboard from database\r\n            const dashboard = await this.getDashboard()\r\n            // Set as current dashboard\r\n            await this.setDashboard(dashboard)\r\n\r\n            // Get dashboard model specification\r\n            const model = dashboard.specification\r\n            // Load dashboard model\r\n            await this.loadDashboardModel(model)\r\n            // Load dashboard data\r\n            await this.loadDashboardData()\r\n            // When everything is ready show dashboard\r\n            this.dashboardLoaded = true\r\n        },\r\n        async saveDashboardToDatabase () {\r\n            if (!this.permission) {\r\n                console.log('No permission to save dashboards!')\r\n                return\r\n            } else {\r\n                console.log('Permission to save dashboard!')\r\n            }\r\n            // Get current dashboard model\r\n            const dashboardModel = await this.getDashboardModel()()\r\n            // Combine dashboard id with dashboard model specification\r\n            const dashboardId = parseInt(this.dashboardId)\r\n            const data = { id: dashboardId, data: dashboardModel }\r\n            // Send this data to update the dashboard in the database\r\n            await this.updateDashboard(data)\r\n            // Signal that changes are saved\r\n            await this.setInitialDashboard()\r\n        },\r\n        async loadDashboardModel (model) {\r\n            // Force reload by first setting model to null\r\n            await this.createDashboardModel(null)\r\n            // Then set dashboard model\r\n            const payload = { value: model }\r\n            await this.createDashboardModel(payload)\r\n        },\r\n        async loadDashboardData () {\r\n            // Retrieve and save all indicators of the given methods\r\n            const indicators = await this.retrieveIndicators()\r\n            await this.setIndicators(indicators)\r\n\r\n            // Retrieve and save all data for the indicators of the given methods\r\n            const indicatorData = await this.retrieveIndicatorData()\r\n            await this.setIndicatorData(indicatorData)\r\n\r\n            // Create data sets for each indicator\r\n            await this.createIndicatorDataSets()\r\n        },\r\n        async retrieveIndicators () {\r\n            const methodIds = await this.getMethods()()\r\n            var indicators = []\r\n            for (var methodId of methodIds) {\r\n                const directIndicators = await DirectIndicatorService.get({ mId: methodId })\r\n                console.log(directIndicators)\r\n                if (!directIndicators?.error || directIndicators?.error?.response?.status === 404) {\r\n                    for (var directIndicator of (directIndicators?.response?.data || [])) {\r\n                        indicators.push(directIndicator)\r\n                    }\r\n                }\r\n                const indirectIndicators = await IndirectIndicatorService.get({ mId: methodId })\r\n                console.log(indirectIndicators)\r\n                if (!indirectIndicators?.error || indirectIndicators?.error?.response?.status === 404) {\r\n                    for (var indirectIndicator of (indirectIndicators?.response?.data || [])) {\r\n                        indicators.push(indirectIndicator)\r\n                    }\r\n                }\r\n            }\r\n            // console.log(indicators)\r\n            indicators = indicators?.map(el => ({ name: el.name, key: el.key }))\r\n            return indicators\r\n        },\r\n        async retrieveIndicatorData () {\r\n            // Determine current organisation and targeted methods for dashboard\r\n            const methodIds = await this.getMethods()()\r\n            const organisationId = this.organisationId\r\n\r\n            /* Get the data from the esea accounts of the current organisation (by looking at the question responses in the survey responses) */\r\n            var eseaData = []\r\n\r\n            // Get esea accounts for this organisation\r\n            const eseaAccountsRequest = await EseaAccountService.get({ oId: organisationId })\r\n            if (eseaAccountsRequest.error) return\r\n            const eseaAccounts = eseaAccountsRequest.response.data\r\n\r\n            // Loop over esea accounts\r\n            for (var eseaAccount of eseaAccounts) {\r\n                const eseaAccountId = eseaAccount.id\r\n                // Get year and method of this esea account\r\n                const eseaAccountYear = eseaAccount.year\r\n                const eseaMethod = eseaAccount.method\r\n\r\n                // If this esea account is not for a targeted method, skip this esea account\r\n                if (!methodIds.includes(eseaMethod)) continue\r\n\r\n                // Get all survey responses for this esea account\r\n                const surveyResponseRequest = await SurveyResponseService.get({ oId: organisationId, eaId: eseaAccountId })\r\n                if (surveyResponseRequest.error) continue\r\n                const surveyResponses = surveyResponseRequest.response.data\r\n\r\n                // Loop over survey responses\r\n                for (var surveyResponse of surveyResponses) {\r\n                    // Get responses to questions\r\n                    const questionResponses = surveyResponse.question_responses\r\n\r\n                    // Loop over all questions\r\n                    for (var questionResponse of questionResponses) {\r\n                        // Retrieve indicator data and the given values\r\n                        const directIndicatorKey = questionResponse.direct_indicator_key\r\n                        const directIndicatorValue = questionResponse.value ?? questionResponse.values\r\n                        const multipleChoice = questionResponse.value === null\r\n\r\n                        // Store indicator data\r\n                        eseaData.push({\r\n                            'Indicator Key': directIndicatorKey,\r\n                            Value: directIndicatorValue,\r\n                            Year: eseaAccountYear,\r\n                            'Multiple Choice': multipleChoice\r\n                            // 'Esea Account Id': eseaAccountId,\r\n                            // 'Method Id': eseaMethod,\r\n                            // 'Indicator Id': directIndicatorId\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Return the data for all indicators\r\n            return eseaData\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.organisation-dashboard {\r\n    min-height: 600px;\r\n    position: relative;\r\n\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    height: 100%;\r\n\r\n    /* Handle edit area element */\r\n    --edit-area-width: 200px;\r\n    --edit-area-current-width: 0px;\r\n    --edit-sidebar-width: 20px;\r\n}\r\n.spinner-div {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n</style>\r\n"]}]}