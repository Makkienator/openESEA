{"remainingRequest":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\charts\\ProgressBar.vue?vue&type=template&id=233b8d98","dependencies":[{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\charts\\ProgressBar.vue","mtime":1707572265299},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1741014593746},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1741014602863},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741014584802},{"path":"C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1741014595374}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgPHZ1ZS1lY2hhcnRzIDpvcHRpb249ImNyZWF0ZU9wdGlvbnMoY2hhcnREYXRhKSIgYXV0b3Jlc2l6ZT4NCiAgICA8L3Z1ZS1lY2hhcnRzPg0K"},{"version":3,"sources":["C:\\Users\\Marc\\source\\repos\\openESEA\\openESEA_interpreter\\frontend\\src\\components\\dashboard\\visualisations\\charts\\ProgressBar.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/Marc/source/repos/openESEA/openESEA_interpreter/frontend/src/components/dashboard/visualisations/charts/ProgressBar.vue","sourceRoot":"","sourcesContent":["<template>\r\n    <vue-echarts :option=\"createOptions(chartData)\" autoresize>\r\n    </vue-echarts>\r\n</template>\r\n\r\n<script>\r\nimport 'echarts'\r\nimport ECharts from 'vue-echarts'\r\nimport { use } from 'echarts/core'\r\nimport { CanvasRenderer } from 'echarts/renderers'\r\n\r\nuse([CanvasRenderer])\r\n\r\nexport default {\r\n    components: {\r\n        'vue-echarts': ECharts\r\n    },\r\n    props: {\r\n        chartData: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    methods: {\r\n        createOptions (chartData) {\r\n            const title = chartData?.title\r\n            const titleOptions = {\r\n                text: title,\r\n                left: 'center',\r\n                textStyle: {\r\n                    overflow: 'break',\r\n                    fontSize: 12,\r\n                    width: this.$parent.$el.clientWidth\r\n                }\r\n            }\r\n            const mapping = chartData?.mapping\r\n            if (!mapping) return { title: titleOptions }\r\n            const currentValueField = mapping?.['Current Value Field']?.key\r\n            const targetValueField = mapping?.['Target Value Field']?.key\r\n            if (!currentValueField) return { title: titleOptions }\r\n            const currentValueName = mapping?.['Current Value Field']?.name\r\n            const targetValueName = mapping?.['Target Value Field']?.name\r\n\r\n            const data = chartData.data\r\n            const chartOptions = chartData.options\r\n            const isPercentage = targetValueField === null || targetValueField === undefined || chartOptions?.isPercentage === true\r\n\r\n            const currentValue = data[0][currentValueField]\r\n            const targetValue = isPercentage ? 100 : data[0][targetValueField]\r\n\r\n            const currentValueNameRevised = !currentValueName ? [isPercentage ? 'Progress' : 'Current'] : currentValueName\r\n            const targetValueNameRevised = !targetValueName ? [isPercentage ? '' : 'Target'] : targetValueName\r\n            var formattedText = '<b>' + currentValueNameRevised + '</b> ' + currentValue + (isPercentage ? '%' : '')\r\n            if (!isPercentage) {\r\n                formattedText += '<br />' +\r\n                    '<b>' + targetValueNameRevised + '</b> ' + targetValue\r\n            }\r\n\r\n            const options = {\r\n                title: titleOptions,\r\n                xAxis: {\r\n                    type: 'value',\r\n                    min: 0,\r\n                    max: targetValue,\r\n                    show: false\r\n                },\r\n                yAxis: {\r\n                    type: 'category',\r\n                    show: false\r\n                },\r\n                tooltip: {\r\n                    trigger: 'axis',\r\n                    axisPointer: {\r\n                        type: 'shadow'\r\n                    },\r\n                    formatter: formattedText\r\n                },\r\n                series: [\r\n                    {\r\n                        data: [currentValue],\r\n                        type: 'bar',\r\n                        showBackground: true,\r\n                        backgroundStyle: {\r\n                            color: 'rgba(180, 180, 180, 0.2)'\r\n                        },\r\n                        barWidth: '100%'\r\n                    }\r\n                ],\r\n                grid: {\r\n                    bottom: 'middle',\r\n                    height: this.$parent.$el.clientHeight / 4\r\n                }\r\n            }\r\n            return options\r\n        }\r\n    }\r\n}\r\n</script>\r\n"]}]}