"""
Django settings for SEA-TOOL project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import datetime
from pathlib import Path
from dotenv import load_dotenv
from ast import literal_eval


env_path = Path('.') / '.env'
load_dotenv(env_path)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'oyrxyi14$(tpvmrlq$&u)eefxs5t!j%ah9z(%97*jcxq_96&w1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") or False

# which hosts are allowed
hosts = os.getenv("ALLOWED_HOSTS")
if hosts:
    ALLOWED_HOSTS = literal_eval(hosts)
else:
    ALLOWED_HOSTS = []

# which sites to whitelist for CORS
whitelist = os.getenv("CORS_ORIGIN_WHITELIST")
if whitelist:
    CORS_ORIGIN_WHITELIST = literal_eval(whitelist)
else:
    CORS_ORIGIN_WHITELIST = []

# Allow CORS all
cors_origin_allow_all_bool = os.getenv("CORS_ORIGIN_ALLOW_ALL") and bool(
    literal_eval(os.getenv("CORS_ORIGIN_ALLOW_ALL"))
)
CORS_ORIGIN_ALLOW_ALL = cors_origin_allow_all_bool
CORS_ALLOW_CREDENTIALS = cors_origin_allow_all_bool is not True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'sea_core.apps.SeaCoreConfig',
    'rest_framework.authtoken',
    'rest_auth',
    'corsheaders',
    'rest_registration',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Email

EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

if os.getenv("DB_TYPE") == "mysql":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv("DB_NAME"),
            'USER': os.getenv("DB_USER"),
            'PASSWORD': os.getenv("DB_PASSWORD"),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# directories for static
STATIC_ROOT = os.path.join(BASE_DIR, "backend/static/")
STATIC_URL = "/static/"

# directories for media
MEDIA_ROOT = os.path.join(BASE_DIR, "backend/media/")
MEDIA_URL = "/media/"

# REST FRAMEWORK
# https://www.django-rest-framework.org/

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

AUTH_USER_MODEL = 'sea_core.User'
REST_USE_JWT = True

JWT_AUTH = {
    # The reponse handler is used for what gets send in the response
    # Removing it will make use of the default handler.
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'sea_core.auth.jwt_response_payload_handler',
    # If the secret is wrong, it will raise a jwt.DecodeError.
    # You can still get at the payload by setting the JWT_VERIFY to False.
    'JWT_VERIFY': True,
    # You can turn off expiration time verification by setting:
    #   JWT_VERIFY_EXPIRATION to False.
    # If set to False, JWTs will last forever,
    #    meaning a leaked token could be used by an attacker indefinitely.
    'JWT_VERIFY_EXPIRATION': True,
    # This is an instance of Python's datetime.timedelta.
    # This will be added to datetime.utcnow() to set the expiration time.
    # Default is datetime.timedelta(seconds=300)(5 minutes).
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=1),
    'JWT_ALLOW_REFRESH': True,
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}


# Registration settings
VERIFICATION_ENABLED = os.getenv("VERIFICATION_ENABLED") == 'True'
REST_REGISTRATION = {
    'REGISTER_VERIFICATION_ENABLED': VERIFICATION_ENABLED,
    'REGISTER_EMAIL_VERIFICATION_ENABLED': VERIFICATION_ENABLED,
    'RESET_PASSWORD_VERIFICATION_ENABLED': VERIFICATION_ENABLED,
    'REGISTER_VERIFICATION_URL': os.getenv("REGISTER_VERIFICATION_URL"),
    'RESET_PASSWORD_VERIFICATION_URL': os.getenv(
        "RESET_PASSWORD_VERIFICATION_URL"
    ),
    'REGISTER_EMAIL_VERIFICATION_URL': os.getenv(
        "REGISTER_EMAIL_VERIFICATION_URL"
    ),
    'VERIFICATION_FROM_EMAIL': os.getenv("VERIFICATION_FROM_EMAIL"),
    'REGISTER_SERIALIZER_CLASS': 'sea_core.serializers.RegisterUserSerializer',
    'REGISTER_OUTPUT_SERIALIZER_CLASS': 'sea_core.serializers.UserTokenSerializer',
}
